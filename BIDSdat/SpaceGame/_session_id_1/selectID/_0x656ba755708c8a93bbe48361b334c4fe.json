[('base_directory', PosixPath('/Users/azp271/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/RO1_Brain_Mechanisms_IRB_5357/Participant_Data/BIDSdat')), ('dat_overwrite', False), ('function_str', "def checkData(subject_list, session_id, base_directory, dat_overwrite):\n    import pandas as pd\n    from pathlib import Path\n    from nipype import Node, DataGrabber\n    from collections.abc import Iterable\n\n    #raw data\n    raw_data_path = Path(base_directory).joinpath('raw_data')\n\n    #database\n    database_path = Path(base_directory).joinpath('derivatives/preprocessed/beh/')\n\n    #get session\n    #check if session_id is an iterable\n    if isinstance(session_id, Iterable) == True:\n        session = str(''.join(session_id))\n    else:\n        session = str(session_id)\n\n    session_num = int(session)\n\n    #check if has 1 or 2 session lists\n    if isinstance(subject_list[0], str) == True:\n        subject_list_use = subject_list\n    else:\n        session = session_num - 1\n        subject_list_use = subject_list[session][0]\n\n    #check for existing data\n    if dat_overwrite is False:\n        #load data \n        database = Path(database_path).joinpath('task-space_summary.tsv')\n        Space_database = pd.read_csv(str(database), sep = '\\t', encoding = 'utf-8-sig', header = 0, engine='python')\n\n        #check session in database\n        db_sessions = Space_database.ses.unique()\n\n        #if session number is in database\n        if session_num in db_sessions:\n\n            Space_database_ses = Space_database.groupby('ses').get_group(session_num)\n\n            subs = list(subject_list_use)\n\n            for sub in subs:\n\n                #check if in database\n                if len(Space_database_ses[Space_database_ses['sub']==int(sub)].index.tolist()) > 0:\n                    #remove sub if in list that exists in database already\n                    print('Skipping sub-' + str(sub) + ' for session' + str(session_num) + ' - Exists in database already.')\n                    subject_list_use.remove(sub)\n\n    #get file paths\n    if len(subject_list_use) > 0:\n        template_path = Path('sub-%s/ses-%s/beh/*task-space*.tsv')\n        selectfiles = Node(DataGrabber(infields=['subject_ids', 'session_id'],\n                      outfields=['sub_files'],\n                      base_directory = str(raw_data_path), \n                      template = str(template_path),\n                      sort_filelist = True),\n          name='selectfiles')\n        selectfiles.inputs.session_id = session_id\n        selectfiles.inputs.subject_ids = subject_list_use\n\n        sub_files = selectfiles.run().outputs.sub_files\n\n    else:\n        sub_files = 'No subfiles'\n\n    return sub_files\n"), ('session_id', '1'), ('subject_list', [[['095', '121', '039', '093', '105', '118', '074', '069', '068', '073', '049', '090', '055', '048', '096', '072', '120', '111', '112', '126', '078', '103', '083', '071', '122', '106', '045', '124', '054', '080', '119', '101', '123', '077', '089', '057', '021', '113', '051', '084', '107', '075', '098', '109', '052', '047', '116', '115', '070', '041', '056', '114', '117', '104']], [['038', '019', '095', '040', '039', '007', '093', '074', '026', '033', '073', '049', '055', '096', '028', '020', '035', '078', '083', '005', '071', '023', '006', '045', '054', '080', '094', '018', '089', '002', '009', '021', '043', '051', '084', '037', '052', '017', '003', '001', '011', '041', '068']]]), ('needed_outputs', ['sub_files'])]