[('Space_file', ('/Users/azp271/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/RO1_Brain_Mechanisms_IRB_5357/Participant_Data/BIDSdat/raw_data/sub-068/ses-1/beh/sub-068_ses-1_task-space_events.tsv', 'ea781de5afa1cb27153d113645978732')), ('base_directory', PosixPath('/Users/azp271/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/RO1_Brain_Mechanisms_IRB_5357/Participant_Data/BIDSdat')), ('function_str', "def summarySpace(Space_file, base_directory):\n    import numpy as np\n    import pandas as pd\n    import scipy.io as sio\n    from pathlib import Path\n\n    ###################################################################\n    ####                   Sub-function script                     ####\n\n    #need to sub-functions within the function that is called by the node just \n    #like you need to re-import libraries\n    def summary_stats(Space_data):\n\n        #Earth RT\n        earthRT_mean = Space_data.loc[Space_data['rt_earth'] > 0, 'rt_earth'].mean(axis = 0)*1000  \n        earthRT_median = Space_data.loc[Space_data['rt_earth'] > 0, 'rt_earth'].median(axis = 0)*1000  \n\n        #Earth missed\n        earth_n_miss = Space_data['missed_earth'].sum(axis = 0)\n        earth_p_miss = Space_data['missed_earth'].sum(axis = 0)/Space_data['missed_earth'].shape[0]\n\n        #Planet RT\n        planetRT_mean = Space_data.loc[Space_data['rt_planet'] > 0, 'rt_planet'].mean(axis = 0)*1000  \n        planetRT_median = Space_data.loc[Space_data['rt_planet'] > 0, 'rt_planet'].median(axis = 0)*1000  \n\n        #Planet missed\n        planet_n_miss = Space_data['missed_planet'].sum(axis = 0)\n        planet_p_miss = Space_data['missed_planet'].sum(axis = 0)/Space_data['missed_planet'].shape[0]\n\n        #reward rate\n        reward_rate = Space_data.loc[(Space_data['missed_earth'] == 0) & (Space_data['missed_planet'] == 0), 'points'].mean(axis = 0)\n\n        #average reward overall across both options\n        rewards = Space_data[['rewards1', 'rewards2']].values.tolist()\n        rewards_flat = [item for sublist in rewards for item in sublist]\n        avg_reward = sum(rewards_flat)/len(rewards_flat)\n\n        #corrected reward rate\n        reward_rate_corrected = reward_rate - avg_reward\n\n        #stay probabilities (always won previously as no negatives) for if\n        #earth state is same or different\n        prob_sameplanet_earthsame = Space_data.loc[(Space_data['same_earth'] == 1) & (Space_data['missed_earth'] == 0) & (Space_data['missed_planet'] == 0), 'same_planet'].mean(axis = 0)\n        prob_sameplanet_earthdif = Space_data.loc[(Space_data['same_earth'] == 0) & (Space_data['missed_earth'] == 0) & (Space_data['missed_planet'] == 0), 'same_planet'].mean(axis = 0)\n\n        summary_results = [earthRT_mean, earthRT_median, earth_n_miss, earth_p_miss, planetRT_mean, planetRT_median, \n                            planet_n_miss, planet_p_miss, reward_rate, avg_reward, reward_rate_corrected, \n                            prob_sameplanet_earthsame, prob_sameplanet_earthdif]\n\n        return(summary_results)\n\n    ###################################################################\n    ####                Primary function script                    ####\n\n    #summary column names\n    colnames = ['sub', 'ses', 'block', 'earth_rt_mean', 'earth_rt_median', 'earth_n_miss', 'earth_p_miss', 'planet_rt_mean', \n                'planet_rt_median', 'planet_n_miss', 'planet_p_miss', 'reward_rate', 'avg_reward', \n                'reward_rate_corrected', 'prob_sameplanet_earthsame', 'prob_sameplanet_earthdif']\n\n    #check if str\n    if isinstance(Space_file, str):\n\n        #check to see if it is filepath str or 'No subfiles' message\n        if '.tsv' in Space_file:\n            #if only 1 file, will be string and we want an array\n            Space_file = [Space_file]\n        else:\n            Space_file = []\n\n    if len(Space_file) > 0:\n\n        #loop counter\n        count = 0\n\n        #supress warning\n        pd.options.mode.chained_assignment = None\n\n        for file in Space_file:\n\n            #load data \n            Space_ProcData = pd.read_csv(str(file), sep = '\\t', encoding = 'utf-8-sig', engine='python') \n\n            #add previous trial data\n            Space_ProcData['prev_state_earth'] = Space_ProcData['state_earth'].shift(1)\n            Space_ProcData['prev_state_earth'] = np.where(np.isnan(Space_ProcData['prev_state_earth']), 0, Space_ProcData['prev_state_earth'])\n\n            Space_ProcData['prev_state_planet'] = Space_ProcData['state_planet'].shift(1)\n            Space_ProcData['prev_state_planet'] = np.where(np.isnan(Space_ProcData['prev_state_planet']), 0, Space_ProcData['prev_state_planet'])\n\n            Space_ProcData['same_earth'] = np.where(Space_ProcData['state_earth'] == Space_ProcData['prev_state_earth'], 1, 0)\n            Space_ProcData['same_planet'] = np.where(Space_ProcData['state_planet'] == Space_ProcData['prev_state_planet'], 1, 0)\n\n            #summary stats - across all blocks\n            all_trials_stat = summary_stats(Space_ProcData)\n            all_trials_stat.insert(0, Space_ProcData.loc[0, 'sub'])\n            all_trials_stat.insert(1, Space_ProcData.loc[0, 'ses'])\n            all_trials_stat.insert(2, 'all')\n\n            if count == 0:\n                #make summary dataset\n                overall_summary_data = pd.DataFrame(all_trials_stat).T\n                overall_summary_data.columns = colnames\n\n                #make group_trailsdat dataset\n                space_group_trialsdat = Space_ProcData\n            else:\n                #add to summary dataset\n                overall_summary_data.loc[len(overall_summary_data)] = all_trials_stat\n\n                #add to group_trailsdat dataset\n                space_group_trialsdat = Space_ProcData\n                space_group_trialsdat = pd.concat([space_group_trialsdat, Space_ProcData],ignore_index=True)\n\n            # summary stats - by block \n            for b in np.unique(Space_ProcData['block']):\n                #get block data\n                block_data = Space_ProcData.loc[Space_ProcData['block'] == b]\n\n                #re-do previous trial data base on just current block\n                block_data['prev_state_earth'] = block_data['state_earth'].shift(1)\n                block_data['prev_state_earth'] = np.where(np.isnan(block_data['prev_state_earth']), 0, block_data['prev_state_earth'])\n\n                block_data['prev_state_planet'] = block_data['state_planet'].shift(1)\n                block_data['prev_state_planet'] = np.where(np.isnan(block_data['prev_state_planet']), 0, block_data['prev_state_planet'])\n\n                block_data['same_earth'] = np.where(block_data['state_earth'] == block_data['prev_state_earth'], 1, 0)\n                block_data['same_planet'] = np.where(block_data['state_planet'] == block_data['prev_state_planet'], 1, 0)\n\n                #get summary results\n                block_trials_stat = summary_stats(block_data)\n                block_trials_stat.insert(0, Space_ProcData.loc[0, 'sub'])\n                block_trials_stat.insert(1, Space_ProcData.loc[0, 'ses'])\n\n                block_name = 'b' + str(b)\n                block_trials_stat.insert(2, block_name)\n\n                #append new rows\n                overall_summary_data.loc[len(overall_summary_data)] = block_trials_stat\n\n            #update count for files loop\n            count = 1\n\n    else:\n         overall_summary_data = 'no files'\n\n    return overall_summary_data, space_group_trialsdat\n"), ('needed_outputs', ['group_trialdat', 'summarySpace_dat'])]