[('bids_dir', '/Users/azp271/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/RO1_Brain_Mechanisms_IRB_5357/Participant_Data/BIDSdat'), ('block_sumDat', [array([['28', '2', 'b0', '16', '44', '60', '60', '100.0', '16', '100.0',
        '0', '0.0', '44', '100.0', '0', '0.0', '100.0', '506.0', '488.0'],
       ['28', '2', 'b1', '16', '44', '60', '60', '100.0', '16', '100.0',
        '0', '0.0', '44', '100.0', '0', '0.0', '100.0', '549.5', '534.5'],
       ['28', '2', 'b2', '16', '44', '60', '58', '96.66666666666667',
        '14', '87.5', '2', '12.5', '44', '100.0', '0', '0.0', '93.75',
        '673.6428571428571', '689.5']], dtype='<U32'), array([['22', '2', 'b0', '16', '44', '60', '59', '98.33333333333333',
        '15', '93.75', '1', '6.25', '44', '100.0', '0', '0.0', '96.875',
        '717.6666666666666', '673.0'],
       ['22', '2', 'b1', '16', '44', '60', '60', '100.0', '16', '100.0',
        '0', '0.0', '44', '100.0', '0', '0.0', '100.0', '817.3125',
        '824.0'],
       ['22', '2', 'b2', '16', '44', '60', '53', '88.33333333333333',
        '11', '68.75', '5', '31.25', '42', '95.45454545454545', '2',
        '4.545454545454546', '82.10227272727272', '837.2727272727273',
        '699.0']], dtype='<U32'), array([['7', '2', 'b0', '16', '44', '60', '59', '98.33333333333333',
        '16', '100.0', '0', '0.0', '43', '97.72727272727273', '1',
        '2.272727272727273', '98.86363636363637', '737.875', '690.5'],
       ['7', '2', 'b1', '16', '44', '60', '58', '96.66666666666667',
        '15', '93.75', '1', '6.25', '43', '97.72727272727273', '1',
        '2.272727272727273', '95.73863636363637', '670.0666666666667',
        '631.0'],
       ['7', '2', 'b2', '16', '44', '60', '50', '83.33333333333334',
        '15', '93.75', '1', '6.25', '35', '79.54545454545455', '9',
        '20.454545454545457', '86.64772727272728', '1145.2', '1001.0']],
      dtype='<U32'), array([['26', '2', 'b0', '16', '44', '60', '60', '100.0', '16', '100.0',
        '0', '0.0', '44', '100.0', '0', '0.0', '100.0', '733.25',
        '748.0'],
       ['26', '2', 'b1', '16', '44', '60', '58', '96.66666666666667',
        '15', '93.75', '1', '6.25', '43', '97.72727272727273', '1',
        '2.272727272727273', '95.73863636363637', '828.3333333333334',
        '769.0'],
       ['26', '2', 'b2', '16', '44', '60', '55', '91.66666666666666',
        '12', '75.0', '4', '25.0', '43', '97.72727272727273', '1',
        '2.272727272727273', '86.36363636363637', '933.4166666666666',
        '1009.0']], dtype='<U32'), array([['6', '2', 'b0', '16', '44', '60', '60', '100.0', '16', '100.0',
        '0', '0.0', '44', '100.0', '0', '0.0', '100.0', '490.375',
        '461.0'],
       ['6', '2', 'b1', '16', '44', '60', '59', '98.33333333333333',
        '16', '100.0', '0', '0.0', '43', '97.72727272727273', '1',
        '2.272727272727273', '98.86363636363637', '655.1875', '648.0']],
      dtype='<U32'), array([['5', '2', 'b0', '16', '44', '60', '59', '98.33333333333333',
        '16', '100.0', '0', '0.0', '43', '97.72727272727273', '1',
        '2.272727272727273', '98.86363636363637', '554.4375', '562.0'],
       ['5', '2', 'b1', '16', '44', '60', '58', '96.66666666666667',
        '16', '100.0', '0', '0.0', '42', '95.45454545454545', '2',
        '4.545454545454546', '97.72727272727272', '782.25', '754.5'],
       ['5', '2', 'b2', '16', '44', '60', '58', '96.66666666666667',
        '15', '93.75', '1', '6.25', '43', '97.72727272727273', '1',
        '2.272727272727273', '95.73863636363637', '1008.8', '974.0']],
      dtype='<U32'), array([['2', '2', 'b0', '16', '44', '60', '59', '98.33333333333333',
        '15', '93.75', '1', '6.25', '44', '100.0', '0', '0.0', '96.875',
        '642.2', '620.0'],
       ['2', '2', 'b1', '16', '44', '60', '60', '100.0', '16', '100.0',
        '0', '0.0', '44', '100.0', '0', '0.0', '100.0', '690.125',
        '768.0'],
       ['2', '2', 'b2', '16', '44', '60', '51', '85.0', '10', '62.5',
        '6', '37.5', '41', '93.18181818181817', '3',
        '6.8181818181818175', '77.8409090909091', '829.2', '676.0']],
      dtype='<U32'), array([['23', '2', 'b0', '16', '44', '60', '59', '98.33333333333333',
        '15', '93.75', '1', '6.25', '44', '100.0', '0', '0.0', '96.875',
        '1002.0', '981.0'],
       ['23', '2', 'b1', '16', '44', '60', '58', '96.66666666666667',
        '14', '87.5', '2', '12.5', '44', '100.0', '0', '0.0', '93.75',
        '831.2857142857143', '858.0'],
       ['23', '2', 'b2', '16', '44', '60', '52', '86.66666666666667',
        '14', '87.5', '2', '12.5', '38', '86.36363636363636', '6',
        '13.636363636363635', '86.93181818181819', '1001.9285714285714',
        '968.5']], dtype='<U32'), array([['37', '2', 'b0', '16', '44', '60', '58', '96.66666666666667',
        '16', '100.0', '0', '0.0', '42', '95.45454545454545', '2',
        '4.545454545454546', '97.72727272727272', '725.1875', '722.5'],
       ['37', '2', 'b1', '16', '44', '60', '59', '98.33333333333333',
        '15', '93.75', '1', '6.25', '44', '100.0', '0', '0.0', '96.875',
        '810.0', '756.0'],
       ['37', '2', 'b2', '16', '44', '60', '44', '73.33333333333333',
        '11', '68.75', '5', '31.25', '33', '75.0', '11', '25.0',
        '71.875', '822.0909090909091', '863.0']], dtype='<U32'), array([['18', '2', 'b0', '16', '44', '60', '60', '100.0', '16', '100.0',
        '0', '0.0', '44', '100.0', '0', '0.0', '100.0', '589.0625',
        '573.0'],
       ['18', '2', 'b1', '16', '44', '60', '57', '95.0', '15', '93.75',
        '1', '6.25', '42', '95.45454545454545', '2', '4.545454545454546',
        '94.60227272727272', '614.6666666666666', '568.0'],
       ['18', '2', 'b2', '16', '44', '60', '59', '98.33333333333333',
        '15', '93.75', '1', '6.25', '44', '100.0', '0', '0.0', '96.875',
        '619.7333333333333', '547.0']], dtype='<U32'), array([['3', '2', 'b0', '16', '44', '60', '59', '98.33333333333333',
        '16', '100.0', '0', '0.0', '43', '97.72727272727273', '1',
        '2.272727272727273', '98.86363636363637', '582.6875', '586.5'],
       ['3', '2', 'b1', '16', '44', '60', '60', '100.0', '16', '100.0',
        '0', '0.0', '44', '100.0', '0', '0.0', '100.0', '625.9375',
        '570.5'],
       ['3', '2', 'b2', '16', '44', '60', '56', '93.33333333333333',
        '15', '93.75', '1', '6.25', '41', '93.18181818181817', '3',
        '6.8181818181818175', '93.4659090909091', '812.0', '798.0']],
      dtype='<U32'), array([['40', '2', 'b0', '16', '44', '60', '58', '96.66666666666667',
        '16', '100.0', '0', '0.0', '42', '95.45454545454545', '2',
        '4.545454545454546', '97.72727272727272', '535.375', '510.0'],
       ['40', '2', 'b1', '16', '44', '60', '60', '100.0', '16', '100.0',
        '0', '0.0', '44', '100.0', '0', '0.0', '100.0', '543.3125',
        '535.0'],
       ['40', '2', 'b2', '16', '44', '60', '56', '93.33333333333333',
        '12', '75.0', '4', '25.0', '44', '100.0', '0', '0.0', '87.5',
        '621.6666666666666', '546.0']], dtype='<U32'), array([['35', '2', 'b0', '16', '44', '60', '60', '100.0', '16', '100.0',
        '0', '0.0', '44', '100.0', '0', '0.0', '100.0', '656.375',
        '638.0'],
       ['35', '2', 'b1', '16', '44', '60', '57', '95.0', '13', '81.25',
        '3', '18.75', '44', '100.0', '0', '0.0', '90.625',
        '888.3076923076923', '875.0'],
       ['35', '2', 'b2', '16', '44', '60', '54', '90.0', '10', '62.5',
        '6', '37.5', '44', '100.0', '0', '0.0', '81.25', '968.6',
        '934.5']], dtype='<U32'), array([['11', '2', 'b0', '16', '44', '60', '60', '100.0', '16', '100.0',
        '0', '0.0', '44', '100.0', '0', '0.0', '100.0', '462.875',
        '446.5'],
       ['11', '2', 'b1', '16', '44', '60', '60', '100.0', '16', '100.0',
        '0', '0.0', '44', '100.0', '0', '0.0', '100.0', '545.875',
        '493.0'],
       ['11', '2', 'b2', '16', '44', '60', '60', '100.0', '16', '100.0',
        '0', '0.0', '44', '100.0', '0', '0.0', '100.0', '541.0625',
        '559.0']], dtype='<U32')]), ('function_str', "def updateDatabase_save(block_sumDat, overwrite_flag, bids_dir):\n    import numpy as np\n    import pandas as pd\n    from pathlib import Path\n    from nipype.interfaces.base import Bunch\n\n    #get a Bunch object if more than 1 participant \n    if isinstance(block_sumDat, Bunch):        \n        #get output data from node\n        np_allBlockDat = block_sumDat.summaryNback_dat\n\n    #if only 1 participant/dataset then it is a list    \n    elif isinstance(block_sumDat, list):\n        if len(block_sumDat) == 1:\n            np_allBlockDat = block_sumDat[0]\n        else:\n            np_allBlockDat = block_sumDat\n\n    #convert np subarrays to pandas\n    def np2pds(t):\n        return [pd.DataFrame(sublist) for sublist in t]\n\n    pandas_allBlockDat = np2pds(np_allBlockDat)\n\n    #combine datasets \n    allBlockDat = pd.concat(pandas_allBlockDat)\n\n    #if a pandas dataframe\n    if isinstance(allBlockDat, pd.DataFrame):\n        col_names = ['sub', 'ses', 'block','n_targets', 'n_fill', 'n_trials', 'n_acc', 'p_acc', 'n_target_hit', 'p_target_hit', 'n_target_miss', 'p_target_miss', 'n_fill_corr', 'p_fill_corr', 'n_fill_fa', 'p_fill_fa', 'p_target_ba', 'rt_mean_target_hit', 'rt_med_target_hit']\n        allBlockDat.columns = col_names\n        allBlockDat = pd.DataFrame(allBlockDat).convert_dtypes()\n        allBlockDat = allBlockDat.reset_index(drop = True)    \n\n        #set numeric columns to dtype numeric\n        num_cols = allBlockDat.loc[:, allBlockDat.columns != 'block'].apply(pd.to_numeric).round(3)\n\n        #replace in orig dataset\n        allBlockDat.loc[:, num_cols.columns] = num_cols\n\n        #get session subsets\n        db_sessions = allBlockDat.ses.unique()\n\n        #make wide data set \n        if len(db_sessions) > 1:\n            allBlockDat_ses1_dat = allBlockDat.groupby('ses').get_group(1)\n            allBlockDat_ses2_dat = allBlockDat.groupby('ses').get_group(2)\n\n            #make wide data set \n            allBlockDat_ses1_wide = allBlockDat_ses1_dat.pivot(columns='block', index='sub', values=col_names[3:19])\n            allBlockDat_ses1_wide.columns = ['_'.join(col) for col in allBlockDat_ses1_wide.columns.reorder_levels(order=[1, 0])]\n\n            allBlockDat_ses2_wide = allBlockDat_ses2_dat.pivot(columns='block', index='sub', values=col_names[3:19])\n            allBlockDat_ses2_wide.columns = ['_'.join(col) for col in allBlockDat_ses2_wide.columns.reorder_levels(order=[1, 0])]\n\n            #make the sub index into a dataset column\n            allBlockDat_ses1_wide = allBlockDat_ses1_wide.reset_index(level = 0)\n            allBlockDat_ses2_wide = allBlockDat_ses2_wide.reset_index(level = 0)\n\n            #add session\n            allBlockDat_ses1_wide.insert(1, 'ses', 1)\n            allBlockDat_ses1_wide.insert(1, 'ses', 2)\n\n\n            #concatonate databases\n            allBlockDat_wide = pd.concat([allBlockDat_ses1_wide, allBlockDat_ses2_wide],ignore_index=True)\n\n        else:\n            #make wide data set \n            allBlockDat_wide = allBlockDat.pivot(columns='block', index='sub', values = col_names[3:19])        \n            allBlockDat_wide.columns = ['_'.join(col) for col in allBlockDat_wide.columns.reorder_levels(order=[1, 0])]\n\n            #make the sub index into a dataset column\n            allBlockDat_wide = allBlockDat_wide.reset_index(level = 0)\n\n            #add session\n            allBlockDat_wide.insert(1, 'ses', db_sessions[0])\n\n        #re-order columns\n        columnnames_reorder = ['sub', 'ses', \n         'b0_n_targets', 'b0_n_fill', 'b0_n_trials', 'b0_n_acc','b0_p_acc',\n         'b0_n_target_hit','b0_p_target_hit', 'b0_n_target_miss',\n         'b0_p_target_miss','b0_n_fill_corr','b0_p_fill_corr',\n         'b0_n_fill_fa', 'b0_p_fill_fa','b0_p_target_ba',\n         'b0_rt_mean_target_hit','b0_rt_med_target_hit',\n         'b1_n_targets', 'b1_n_fill', 'b1_n_trials', 'b1_n_acc','b1_p_acc',\n         'b1_n_target_hit','b1_p_target_hit','b1_n_target_miss',\n         'b1_p_target_miss', 'b1_n_fill_corr','b1_p_fill_corr',\n         'b1_n_fill_fa','b1_p_fill_fa','b1_p_target_ba',\n         'b1_rt_mean_target_hit','b1_rt_med_target_hit',\n         'b2_n_targets', 'b2_n_fill', 'b2_n_trials', 'b2_n_acc','b2_p_acc',\n         'b2_n_target_hit','b2_p_target_hit', 'b2_n_target_miss',\n         'b2_p_target_miss','b2_n_fill_corr','b2_p_fill_corr',\n         'b2_n_fill_fa','b2_p_fill_fa','b2_p_target_ba',\n         'b2_rt_mean_target_hit','b2_rt_med_target_hit']\n\n        allBlockDat_wide = allBlockDat_wide.reindex(columns=columnnames_reorder)\n\n        ## load databases\n        #derivative data path\n        derivative_data_path = Path(bids_dir).joinpath('derivatives/preprocessed/beh')\n\n        #load databases\n        Nback_database = pd.read_csv(str(Path(derivative_data_path).joinpath('task-nback_summary.tsv')), sep = '\\t') \n        Nback_database_long = pd.read_csv(str(Path(derivative_data_path).joinpath('task-nback_summary_long.tsv')), sep = '\\t')\n\n        #if overwriting participants\n        if overwrite_flag == True:\n            #function to drop rows based on values\n            def filter_rows_by_values(df, sub_values, sesnum):\n                #fileter based on sub and ses\n                return df[(df['sub'].isin(sub_values) == False) & (df['ses'] == sesnum)]\n\n            #filter out/remove exisiting subs to overwrit~\n            if len(db_sessions) > 1:\n                #get list of subs by ses to filter in wide and long data\n                wide_sub_list = allBlockDat_wide.groupby('ses')['sub'].unique()\n                long_sub_list = allBlockDat.groupby('ses')['sub'].unique()\n\n                Nback_database_ses1 = filter_rows_by_values(Nback_database, wide_sub_list[0], 1)\n                Nback_database_ses2 = filter_rows_by_values(Nback_database, wide_sub_list[1], 2)\n\n                Nback_database_ses1_long = filter_rows_by_values(Nback_database_long, long_sub_list[0], 1)\n                Nback_database_ses2_long = filter_rows_by_values(Nback_database_long, long_sub_list[1], 2)\n\n                #concatonate databases\n                Nback_database = pd.concat([Nback_database_ses1, Nback_database_ses2],ignore_index=True)\n                Nback_database_long = pd.concat([Nback_database_ses1_long, Nback_database_ses2_long],ignore_index=True)\n\n            else:\n                wide_sub_list = list(allBlockDat_wide['sub'].unique())\n                long_sub_list = list(allBlockDat['sub'].unique())\n\n                #filter by ses and sub\n                Nback_database_ses = filter_rows_by_values(Nback_database, wide_sub_list, db_sessions[0])\n                Nback_database_long_ses = filter_rows_by_values(Nback_database_long, long_sub_list, db_sessions[0])\n\n                #concatonate with other session in full database\n                Nback_database = pd.concat([Nback_database[Nback_database['ses'] != db_sessions[0]], Nback_database_ses],ignore_index=True)\n                Nback_database_long = pd.concat([Nback_database_long[Nback_database_long['ses'] != db_sessions[0]], Nback_database_long_ses],ignore_index=True)\n\n        #add newly processed data\n        Nback_database = Nback_database.append(allBlockDat_wide)\n        Nback_database_long = Nback_database_long.append(allBlockDat)\n\n        #sort to ensure in sub order\n        Nback_database = Nback_database.sort_values(by = ['ses', 'sub'])\n        Nback_database_long = Nback_database_long.sort_values(by = ['ses', 'sub', 'block'])\n\n        #round to 3 decimal points\n        Nback_database = Nback_database.applymap(lambda x: round(x, 3) if isinstance(x, (int, float)) else x)\n        Nback_database_long = Nback_database_long.applymap(lambda x: round(x, 3) if isinstance(x, (int, float)) else x)\n\n        #write databases\n        Nback_database.to_csv(str(Path(derivative_data_path).joinpath('task-nback_summary.tsv')), sep = '\\t', encoding='utf-8-sig', index = False) \n        Nback_database_long.to_csv(str(Path(derivative_data_path).joinpath('task-nback_summary_long.tsv')), sep = '\\t', encoding='utf-8-sig', index = False)\n\n        return Nback_database, Nback_database_long\n"), ('overwrite_flag', True)]