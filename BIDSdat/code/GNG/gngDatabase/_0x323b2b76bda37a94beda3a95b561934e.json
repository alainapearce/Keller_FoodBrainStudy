[('GNG_summary_dat', [  sub block  nGo nNoGo nAcc   pAcc nGo_Hit nGo_Miss nNoGo_Corr nNoGo_FA   pGo_Hit  pGo_Miss pNoGo_Corr pNoGo_FA RTmeanGo_Hit RTmeanNoGo_FA RTmedGo_Hit RTmedNoGo_FA
0  51   all  150    50    2   0.01       2      148          0       50  0.013333  0.986667        0.0      1.0        708.0         624.7       708.0        587.0
1  51    b1   30    10    1  0.025       1       29          0       10  0.033333  0.966667        0.0      1.0        948.0         633.1       948.0        626.0
2  51    b2   30    10    0    0.0       0       30          0       10       0.0       1.0        0.0      1.0         <NA>         630.9        <NA>        576.0
3  51    b3   30    10    0    0.0       0       30          0       10       0.0       1.0        0.0      1.0         <NA>         668.6        <NA>        618.5
4  51    b4   30    10    0    0.0       0       30          0       10       0.0       1.0        0.0      1.0         <NA>         580.0        <NA>        537.5
5  51    b5   30    10    0    0.0       1       29          0       10  0.033333  0.966667        0.0      1.0        468.0         610.9       468.0        634.5]), ('bids_dir', '/Users/baf44/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/RO1_Brain_Mechanisms_IRB_5357/Participant_Data/BIDSdat'), ('function_str', "def updateDatabase_save(GNG_summary_dat, overwrite_flag, bids_dir):\n    import pandas as pd\n    import numpy as np\n    from pathlib import Path\n    from nipype.interfaces.base import Bunch\n\n    #get a Bunch object if more than 1 participant \n    if isinstance(GNG_summary_dat, Bunch):        \n        #get output data from node\n        GNG_summary_datlist = GNG_summary_dat.summaryGNG_dat\n\n        #combine datasets \n        GNG_summary_dat = pd.concat(GNG_summary_datlist)\n\n    #if only 1 participant/dataset then it is a list    \n    elif isinstance(GNG_summary_dat, list):\n        if len(GNG_summary_dat) == 1:\n            GNG_summary_dat = GNG_summary_dat[0]\n        else:\n            GNG_summary_dat = pd.concat(GNG_summary_dat)\n\n    #if a pandas dataframe\n    if isinstance(GNG_summary_dat, pd.DataFrame):\n\n        #get column names\n        columnnames = GNG_summary_dat.columns\n\n        #get condition subset (overall and each block)\n        #GNG_summary_dat['block'] = GNG_summary_dat['block'].astype(str)\n        GNG_summary_conditions = GNG_summary_dat[GNG_summary_dat.block.isin(['all', 'b1', 'b2', 'b3', 'b4', 'b5'])]\n\n        #make wide data set (for every variable, a column for overall and each block)\n        GNG_summary_wide = GNG_summary_conditions.pivot(columns='block', index='sub', values=columnnames[2:])        \n        GNG_summary_wide.columns = ['_'.join(col) for col in GNG_summary_wide.columns.reorder_levels(order=[1, 0])]\n\n        #make the sub index into a dataset column\n        GNG_summary_wide = GNG_summary_wide.reset_index(level = 0)\n\n        #re-order columns\n        columnnames_reorder = ['sub', 'all_nGo', 'all_nNoGo', 'all_nAcc', 'all_pAcc', 'all_nGo_Hit', 'all_nGo_Miss', 'all_nNoGo_Corr', \n                              'all_nNoGo_FA', 'all_pGo_Hit', 'all_pGo_Miss', 'all_pNoGo_Corr', 'all_pNoGo_FA', 'all_RTmeanGo_Hit', \n                              'all_RTmeanNoGo_FA', 'all_RTmedGo_Hit', 'all_RTmedNoGo_FA',\n\n                              'b1_nGo', 'b1_nNoGo', 'b1_nAcc', 'b1_pAcc', 'b1_nGo_Hit', 'b1_nGo_Miss', 'b1_nNoGo_Corr', \n                              'b1_nNoGo_FA', 'b1_pGo_Hit', 'b1_pGo_Miss', 'b1_pNoGo_Corr', 'b1_pNoGo_FA', 'b1_RTmeanGo_Hit', \n                              'b1_RTmeanNoGo_FA', 'b1_RTmedGo_Hit', 'b1_RTmedNoGo_FA',\n\n                              'b2_nGo', 'b2_nNoGo', 'b2_nAcc', 'b2_pAcc', 'b2_nGo_Hit', 'b2_nGo_Miss', 'b2_nNoGo_Corr', \n                              'b2_nNoGo_FA', 'b2_pGo_Hit', 'b2_pGo_Miss', 'b2_pNoGo_Corr', 'b2_pNoGo_FA', 'b2_RTmeanGo_Hit', \n                              'b2_RTmeanNoGo_FA', 'b2_RTmedGo_Hit', 'b2_RTmedNoGo_FA',\n\n                              'b3_nGo', 'b3_nNoGo', 'b3_nAcc', 'b3_pAcc', 'b3_nGo_Hit', 'b3_nGo_Miss', 'b3_nNoGo_Corr', \n                              'b3_nNoGo_FA', 'b3_pGo_Hit', 'b3_pGo_Miss', 'b3_pNoGo_Corr', 'b3_pNoGo_FA', 'b3_RTmeanGo_Hit', \n                              'b3_RTmeanNoGo_FA', 'b3_RTmedGo_Hit', 'b3_RTmedNoGo_FA',\n\n                              'b4_nGo', 'b4_nNoGo', 'b4_nAcc', 'b4_pAcc', 'b4_nGo_Hit', 'b4_nGo_Miss', 'b4_nNoGo_Corr', \n                              'b4_nNoGo_FA', 'b4_pGo_Hit', 'b4_pGo_Miss', 'b4_pNoGo_Corr', 'b4_pNoGo_FA', 'b4_RTmeanGo_Hit', \n                              'b4_RTmeanNoGo_FA', 'b4_RTmedGo_Hit', 'b4_RTmedNoGo_FA',\n\n                              'b5_nGo', 'b5_nNoGo', 'b5_nAcc', 'b5_pAcc', 'b5_nGo_Hit', 'b5_nGo_Miss', 'b5_nNoGo_Corr', \n                              'b5_nNoGo_FA', 'b5_pGo_Hit', 'b5_pGo_Miss', 'b5_pNoGo_Corr', 'b5_pNoGo_FA', 'b5_RTmeanGo_Hit', \n                              'b5_RTmeanNoGo_FA', 'b5_RTmedGo_Hit', 'b5_RTmedNoGo_FA']\n\n        GNG_summary_wide = GNG_summary_wide.reindex(columns=columnnames_reorder)\n\n        #get indiviudal blocks subset\n        GNG_summary_blocks = GNG_summary_dat[GNG_summary_dat.block.isin(['b1', 'b2', 'b3', 'b4', 'b5'])] \n\n        ## load databases\n        #derivative data path\n        derivative_data_path = Path(bids_dir).joinpath('derivatives/preprocessed/beh')\n\n        #load databases\n        GNG_database = pd.read_csv(str(Path(derivative_data_path).joinpath('task-gng_summary.tsv')), sep = '\\t') \n        GNG_database_long = pd.read_csv(str(Path(derivative_data_path).joinpath('task-gng_summary_long.tsv')), sep = '\\t')\n\n        #if overwriting participants\n        if overwrite_flag == True:\n            #function to drop rows based on values\n            def filter_rows_by_values(df, col, values):\n                return df[df[col].isin(values) == False]\n\n            #get list of subs to filter in wide and long data\n            wide_sub_list = list(GNG_summary_wide['sub'].unique())\n            long_sub_list = list(GNG_summary_blocks['sub'].unique())\n\n            #filter out/remove exisiting subs to overwrite\n            GNG_database = filter_rows_by_values(GNG_database, 'sub', wide_sub_list)\n            GNG_database_long = filter_rows_by_values(GNG_database_long, 'sub', long_sub_list)\n\n        #add newly processed data\n        GNG_database = GNG_database.append(GNG_summary_wide)\n        GNG_database_long = GNG_database_long.append(GNG_summary_blocks)\n\n        #round to 3 decimal points\n        GNG_database = GNG_database.applymap(lambda x: round(x, 3) if isinstance(x, (int, float)) else x)\n        GNG_database_long = GNG_database_long.applymap(lambda x: round(x, 3) if isinstance(x, (int, float)) else x)\n\n        #write databases\n        GNG_database.to_csv(str(Path(derivative_data_path).joinpath('task-gng_summary.tsv')), sep = '\\t', encoding='utf-8-sig', index = False) \n        GNG_database_long.to_csv(str(Path(derivative_data_path).joinpath('task-gng_summary_long.tsv')), sep = '\\t', encoding='utf-8-sig', index = False)\n\n    else:\n        print('No raw data files that need to be processed')\n        GNG_database = np.nan\n        GNG_database_long = np.nan\n\n    return GNG_database, GNG_database_long\n"), ('overwrite_flag', True)]