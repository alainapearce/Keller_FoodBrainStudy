#!/usr/bin/env python3
# -*- coding: utf-8 -*-


#set up packages
import pytest
import pandas as pd
import numpy as np
from pathlib import Path
import os
from pandas.testing import assert_frame_equal
import sys

# import functions to test
from p2_create_censor_files import _gen_concatenated_regressor_file
from p2_create_censor_files import _gen_run_censorfile

####################
##### Fixtures #####
####################

@pytest.fixture
def confounds_list_fixture():

    preproc_path = Path('/Users/baf44/Keller_FoodBrainStudy/BIDSdat/code/f31_proc/fixtures/preprocessed')
    bids_fmriprep_path = Path(preproc_path).joinpath('fmriprep')
    confound_files = list(Path(bids_fmriprep_path).rglob('sub-999/ses-1/func/*task-foodcue_run*confounds_timeseries.tsv'))

    return confound_files

@pytest.fixture
def regress_pardat_fixture():

    preproc_path = Path('/Users/baf44/Keller_FoodBrainStudy/BIDSdat/code/f31_proc/fixtures/preprocessed')
    regress_pardat = Path(preproc_path).joinpath('fmriprep/sub-999/ses-1/func/fixture_sub-999_foodcue-allruns_confounds-header.tsv')
    regress_pardat = pd.read_csv(str(regress_pardat), sep = '\t', encoding = 'utf-8-sig', engine='python')

    return regress_pardat

@pytest.fixture
def confound_dat_fixture():

    confound_dat = pd.DataFrame(np.zeros((80, 2)))
    confound_dat.columns = ['rmsd', 'non_steady_state_outlier00']
    # use np.r_ to concatenate array slices. without np.r_, slices will be inclusive
    confound_dat.at[np.r_[:20, 40:46],["rmsd"]] = .5 # set rows 0:20 & 40:46 to have rmsd of .5 (does not include row 20 or 46)
    confound_dat.at[np.r_[75:79],["non_steady_state_outlier00"]] = 1    # set rows 75:79 to have non_steady_state_outlier00 of 1 (does not include row 79)

    return confound_dat

@pytest.fixture
def censor_info_fixture():

    # Make lists of 1s and 0s, where 1 indicates uncensored TR, 0 indicates censored TR. 
    # Lists will be based on dataframe generated by confound_dat_fixture()
    # Note: first 2 TRs and non_steady_state_outlier00 = 1 should always be censored

    # if censoring for rmsd > 0.3 and TRs *before and after* rmsd threshold exceeded
    rmsd_3_ba = [1] * 80
    index_list = list(range(0,21)) + list(range(39,47)) + list(range(75,79)) # list will not include 21, 47, or 79
    for i in range(len(rmsd_3_ba)):
            if i in index_list:
                rmsd_3_ba[i] = 0

    # if censoring for rmsd > 0.3 and not cencsoring TRs before or after rmsd threshold exceeded
    rmsd_3 = [1] * 80
    index_list = list(range(0,20)) + list(range(40,46)) + list(range(75,79))
    for i in range(len(rmsd_3)):
            if i in index_list:
                rmsd_3[i] = 0

    # if censoring for rmsd > 0.3 and TRs *before* rmsd threshold exceeded
    rmsd_3_b = [1] * 80
    index_list = list(range(0,20)) + list(range(39,46)) + list(range(75,79))
    for i in range(len(rmsd_3_b)):
            if i in index_list:
                rmsd_3_b[i] = 0

    # if censoring for rmsd > 0.6 and TRs *before* rmsd threshold exceeded
    rmsd_6_b = [1] * 80
    index_list = list(range(0,2)) + list(range(75,79))
    for i in range(len(rmsd_6_b)):
            if i in index_list:
                rmsd_6_b[i] = 0

    # put lists into a dictionary
    censor_info_dict = {} # make empty dictionary
    censor_info_dict["rmsd_.3_ba"] = rmsd_3_ba
    censor_info_dict["rmsd_.3"] = rmsd_3
    censor_info_dict["rmsd_.3_b"] = rmsd_3_b
    censor_info_dict["rmsd_.6_b"] = rmsd_6_b

    return censor_info_dict


#################
##### Tests #####
#################

def test_gen_concatenated_regressor_file(confounds_list_fixture, regress_pardat_fixture):
    
    # run function
    regress_Pardat = _gen_concatenated_regressor_file(confounds_list_fixture)
    
    # check function output
    assert_frame_equal(regress_Pardat.reset_index(drop=True), regress_pardat_fixture.reset_index(drop=True)) #drop index since we dont care about that being equal

def test_gen_run_censorfile(confound_dat_fixture, censor_info_fixture):

    # run function with various options
    censor_info_1 = _gen_run_censorfile(confound_dat = confound_dat_fixture, 
                              rmsd_thresh = .3, 
                              cen_add_tr = 'ba') # options equivalent to default

    censor_info_2 = _gen_run_censorfile(confound_dat = confound_dat_fixture, 
                              rmsd_thresh = .3, 
                              cen_add_tr = False)
    
    censor_info_3 = _gen_run_censorfile(confound_dat = confound_dat_fixture, 
                              rmsd_thresh = .3, 
                              cen_add_tr = 'b')
    
    censor_info_4 = _gen_run_censorfile(confound_dat = confound_dat_fixture, 
                              rmsd_thresh = .6, 
                              cen_add_tr = 'b')
    

    # check function censor_info output
    assert censor_info_fixture["rmsd_.3_ba"] == censor_info_1
    assert censor_info_fixture["rmsd_.3"] == censor_info_2
    assert censor_info_fixture["rmsd_.3_b"] == censor_info_3
    assert censor_info_fixture["rmsd_.6_b"] == censor_info_4

