#!/bin/tcsh
#
#useage: G2_2sampleT   $1         $2       $3        $4
#		     template	session	  execute?  motst
#
# The purpose of this script is to create and run 1sample t-tests of all conditions of interest
# $1: ped or MNI
# $2: 1 or 2
# $3 run or no
# $4 r10b20 or r20b20 (or other motst used in future)
###################### set up initial variables  ###########################   
#don't log AFNI programs in ~/.afni.log
setenv AFNI_DONT_LOGFILE YES

#dont try version checks
setenv ANFI_VRSION_CHECK NO

##don't auto-compress output files
setenv AFNI_COMPRESSOR NONE

###################### setup and check directories  ###########################   
#go to and set AFNI main directory
cd ..
set topdir = "$cwd"

#set individual level dir
set ind_dir =  $topdir/ImagingData/Level1GLM/Session${2}

#set group level dir
set group_dir = $topdir/ImagingData/Level2GLM/Activation_Univariate/Session${2}/2sampleT

#set index .1D file directories
set index_dir = $topdir/ImagingData/Level2GLM/Activation_Univariate/Session${2}

#set output name
set today = `date +%m-%d-%y`

#set motion string
set motst = $4

##Get template specific results folder
if ( "$1" == "MNI" ) then
    set results_folder = proc.results2_$motst
    ##Get MNI template impelemented in 1_sswarp_strct
    set basedset = MNI152_2009_template.nii.gz
 
    #look for path to template
    set tpath = `@FindAfniDsetPath $basedset`
else
    set results_folder = proc.results2_ped_$motst
    ##Get Haskins Ped template impelemented in 1_sswarp_strct
    set basedset = HaskinsPeds_NL_template1.0+tlrc
 
    #look for path to template
    set tpath = `@FindAfniDsetPath $basedset`

endif

#check to see if have 'Old' directory, 
#if do, check for and clean up old directories,
#if not, create all folders in that path    
if ( -d $group_dir/Old ) then
    set old_folders = `( ls -d $group_dir/* )`

    #if file path $group_dir/$old in loop not same direct file link to $group_dir/Old
    foreach old ( $old_folders )

        #get just dirname
        set dname = `basename $old`

        #if not the 'Old' directory
        if ( "$dname" != "Old" ) then

            #if $group_dir/$old hasn't been moved to $group_dir/Old
            if ( ! -d $group_dir/Old/$dname ) then
                mv $old $group_dir/Old/

            #else update/copy and remove
            else
                cp -u $old $group_dir/Old/
                rm -r $old
            endif
        endif
    end
else
    mkdir -p $group_dir/Old
endif

#set map folder
set map_folder = $group_dir/${motst}_${today}

if ( ! -d $map_folder ) then
    mkdir -p $map_folder
endif

#make mask with 80% of participants overlapping
if ( ! -f $map_folder/Session${2}_mask0.8_${today}+tlrc ) then
    3dmask_tool -input $ind_dir/R01_*/$results_folder/full_mask*+tlrc.HEAD \
	    -prefix $map_folder/Session${2}_mask0.8_${today}+tlrc              \
	    -frac 0.8
endif


###################### generate scripts  ########################
#loop though all conditions/contrasts of interest
set groups = ( WholeGroup HighRisk LowRisk )

foreach g ( $groups )

    ###################### High_v_Low_PScon ######################
    set output_name = "High_v_Low_PScon"
        
    if ( "$g" == "WholeGroup" ) then
	set fileG = "WG"
	#toz-when using zskip need to convert t to z because voxel 
	#may have different number of samples
	gen_group_command.py -command 3dttest++							\
	    		 -write_script $map_folder/${fileG}_2sampleT++_${output_name}_${motst} 		\
			 -prefix  ${fileG}_2sampleT++_${output_name}_${motst}  				\
			 -dsets $ind_dir/R01_*/$results_folder/stats*REML+tlrc.HEAD			\
			 -set_labels HighLarge-Small LowLarge-Small				\
			 -subs_betas HighLarge-Small'#'0_Coef LowLarge-Small'#'0_Coef	\
			 -options								\
	    		    -paired -mask $map_folder/Session${2}_mask0.8_${today}+tlrc.HEAD  -toz
    
	chmod 775 $map_folder/${fileG}_2sampleT++_${output_name}_${motst} 
    else
	if ( "$g" == "HighRisk" ) then
	    set index = `cat $index_dir/HRindex_${motst}.txt`
	    set fileG = "HR"
	else 
	    set index = `cat $index_dir/LRindex_${motst}.txt`
	    set fileG = "LR"
	endif

	#toz-when using zskip need to convert t to z because voxel
	#may have different number of samples
	gen_group_command.py -command 3dttest++                                            \
		    -write_script $map_folder/${fileG}_2sampleT++_${output_name}_${motst}            \
		    -prefix  ${fileG}_2sampleT++_${output_name}_${motst}                               \
		    -dsets $ind_dir/R01_*/$results_folder/stats*REML+tlrc.HEAD                     \
		    -dset_index0_list $index						   \
		    -set_labels HighLarge-Small LowLarge-Small                             \
		    -subs_betas HighLarge-Small'#'0_Coef LowLarge-Small'#'0_Coef   \
		    -options								   \
			-paired -mask $map_folder/Session${2}_mask0.8_${today}+tlrc.HEAD  -toz

	chmod 775 $map_folder/${fileG}_2sampleT++_${output_name}_${motst} 
	
    endif

    if ( "$3" == "run" ) then
	cd $map_folder
	tcsh ${fileG}_2sampleT++_${output_name}_${motst} 
    endif

    ###################### Large_v_Small_EDcon ######################
    set output_name = "Large_v_Small_EDcon"

    if ( "$g" == "WholeGroup" ) then
        set fileG = "WG"
        #toz-when using zskip need to convert t to z because voxel 
        #may have different number of samples
        gen_group_command.py -command 3dttest++                                                 \
                         -write_script $map_folder/${fileG}_2sampleT++_${output_name}_${motst}          \
                         -prefix  ${fileG}_2sampleT++_${output_name}_${motst}                           \
                         -dsets $ind_dir/R01_*/$results_folder/stats*REML+tlrc.HEAD                     \
                         -set_labels LargeHigh-Low SmallHigh-Low                             \
                         -subs_betas LargeHigh-Low'#'0_Coef SmallHigh-Low'#'0_Coef   \
                         -options                                                               \
                            -paired -mask $map_folder/Session${2}_mask0.8_${today}+tlrc.HEAD  -toz

        chmod 775 $map_folder/${fileG}_2sampleT++_${output_name}_${motst}
    else
        if ( "$g" == "HighRisk" ) then
            set index = `cat $index_dir/HRindex_${motst}.txt`
            set fileG = "HR"
        else
            set index = `cat $index_dir/LRindex_${motst}.txt`
            set fileG = "LR"
        endif

        #toz-when using zskip need to convert t to z because voxel
        #may have different number of samples
        gen_group_command.py -command 3dttest++                                            \
                    -write_script $map_folder/${fileG}_2sampleT++_${output_name}_${motst}            \
                    -prefix  ${fileG}_2sampleT++_${output_name}_${motst}                               \
                    -dsets $ind_dir/R01_*/$results_folder/stats*REML+tlrc.HEAD                     \
                    -dset_index0_list $index                                               \
                    -set_labels LargeHigh-Low SmallHigh-Low                             \
                    -subs_betas LargeHigh-Low'#'0_Coef SmallHigh-Low'#'0_Coef   \
                    -options                                                               \
                        -paired -mask $map_folder/Session${2}_mask0.8_${today}+tlrc.HEAD  -toz

        chmod 775 $map_folder/${fileG}_2sampleT++_${output_name}_${motst}

    endif

    if ( "$3" == "run" ) then
        cd $map_folder
        tcsh ${fileG}_2sampleT++_${output_name}_${motst}
    endif

end

###################### High Risk v Low Risk  ######################

set models = ( HighLarge HighSmall LowLarge LowSmall HighLarge-Small LowLarge-Small LargeHigh-Low SmallHigh-Low Large-Small_allED High-Low_allPS )

foreach m ( $models )
    set output_name = "$m"
    set fileG = "HR_v_LR"
    
    set HRindex = `cat $index_dir/HRindex_$motst.txt`
    set LRindex = `cat $index_dir/LRindex_$motst.txt`
    #toz-when using zskip need to convert t to z because voxel
    #may have different number of samples
    gen_group_command.py -command 3dttest++                                        \
	    -write_script $map_folder/${fileG}_2sampleT++_${output_name}_${motst}            \
	    -prefix  ${fileG}_2sampleT++_${output_name}_${motst}                               \
	    -dsets $ind_dir/R01_*/$results_folder/stats*REML+tlrc.HEAD                     \
	    -dset_index0_list $HRindex                                             \
	    -dsets $ind_dir/R01_*/$results_folder/stats*REML+tlrc.HEAD                     \
	    -dset_index0_list $LRindex						   \
	    -set_labels ${m}							   \
	    -subs_betas "${m}"'#'0_Coef					   \
	    -options								   \
		    -mask $map_folder/Session${2}_mask0.8_${today}+tlrc.HEAD -toz
    
    chmod 775 $map_folder/${fileG}_2sampleT++_${output_name}_${motst} 
    
    if ( "$3" == "run" ) then
	cd $map_folder
	tcsh ${fileG}_2sampleT++_${output_name}_${motst} 
    endif
end


if ( "$tpath" == '' ) then
    echo "***** Failed to find $basedset :("
    exit 1
else
    if ( ! -f $map_folder/$basedset ) then
        cp $tpath/${basedset}.BRIK.gz $map_folder
        cp $tpath/${basedset}.HEAD $map_folder
    endif
endif

