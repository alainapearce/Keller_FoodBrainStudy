#!/bin/tcsh
#
#useage: G3_2sampleT   $1           $2        $3                    $4
#                    template    execute?  entire censor string     mask
#         
# The purpose of this script is to create and run 2 sample paired t-tests of all conditions of interest
# $1: ped or MNI
# $2 run or no
# $3 e.g., fd-0.9_by-block-7_3blocks, fd-0.9_b20_3runs

###################### set up initial variables  ###########################   
#don't log AFNI programs in ~/.afni.log
setenv AFNI_DONT_LOGFILE YES

#dont try version checks
setenv ANFI_VRSION_CHECK NO

##don't auto-compress output files
setenv AFNI_COMPRESSOR NONE

###################### setup and check directories  ###########################   
cd ../../../
set bidsdir = "$cwd"

#set level1 dir
set lev1_dir = $bidsdir/derivatives/analyses/foodcue-paper2/level1

# set mask_area
set mask_area = $4

#set test directory
set test_dir = $bidsdir/derivatives/analyses/foodcue-paper2/level2/quadsign_${mask_area}

# set R dir
set R_dir = $bidsdir/derivatives/analyses/foodcue-paper2/R

# set mask dir
set mask_dir = $bidsdir/derivatives/analyses/foodcue-paper2/masks

#set output name
set today = `date +%m-%d-%y`

# set censor string
set lev1_str = $3

# set path to templates
set tpath = $bidsdir/derivatives/templates/

#Get template specific variables
 if ( "$1" == "MNI" ) then
	##Get MNI template used in fmriprep
	set basedset = $tpath/tpl-MNI152NLin2009cAsym/tpl-MNI152NLin2009cAsym_res-01_T1w.nii.gz
	set basedset_name = "tpl-MNI152NLin2009cAsym_res-01_T1w.nii.gz"
	# set string
	set temp = "MNI152NLin2009cAsym"
	set tempst = "MNI"
else
	#Get pediatric template used in fmriprep
        set basedset = $tpath/tpl-MNIPediatricAsym/cohort-3/tpl-MNIPediatricAsym_cohort-3_res-1_T1w.nii.gz
	set basedset_name = "tpl-MNIPediatricAsym_cohort-3_res-1_T1w.nii.gz"
        # set strings
        set temp = "MNIPediatricAsym_cohort-3"
	set tempst = "ped"
endif

# set lev1 results directory name
set lev1split = ($lev1_str:as/_/ /)
set lev1_results = ${tempst}_$lev1split[1]_$lev1split[2]_$lev1split[4]

# get censor str for index file
set censor_str = $lev1split[1]_$lev1split[2]_$lev1split[3]

#set map folder
set map_folder = $test_dir/${tempst}_${lev1_str}_${today}

#create map folder
if ( ! -d $map_folder ) then
    mkdir -p $map_folder
else
	echo "$map_folder already exists. delete or rename to re-run"
	exit
endif

# copy index list and covariate file into output folder for reference
cp $R_dir/index*quad_${mask_area}_${censor_str}.txt $map_folder
cp $R_dir/fmri_covariates.csv $map_folder

# set index files
set index_negquad_g = $map_folder/index_g_negquad_${mask_area}_${censor_str}.txt
set index_posquad_g = $map_folder/index_g_posquad_${mask_area}_${censor_str}.txt
set index_negquad_kcal = $map_folder/index_kcal_negquad_${mask_area}_${censor_str}.txt
set index_posquad_kcal = $map_folder/index_kcal_posquad_${mask_area}_${censor_str}.txt

###################### generate mask for analyses  ########################
# set whole group index list -- lists subjects to include in mask
set WG_index = `cat $map_folder/index_quad_${mask_area}_${censor_str}.txt`

if ( ! -f $map_folder/quad_${mask_area}_mask0.8+tlrc) then
	
	# make temporary directory with participant masks for subjects included in analyses
	mkdir $map_folder/temp_mask
	foreach sub ( $WG_index )
		cp ${bidsdir}/derivatives/preprocessed/fmriprep/sub-${sub}/ses-1/func/foodcue_full_mask-${temp}*.nii $map_folder/temp_mask/mask_sub-${sub}.nii
	end

	# generate mask with 80% of participants overlapping
	3dmask_tool -input $map_folder/temp_mask/mask* \
					-prefix $map_folder/temp_mask/quad_mask0.8+tlrc              \
					-frac 0.8

	# make intersection mask with 80% mask and functional area mask
 	3dmask_tool -input $map_folder/temp_mask/quad_mask0.8+tlrc $mask_dir/${mask_area}_mask_resamp+tlrc 	\
				-prefix $map_folder/quad_mask0.8+tlrc \
              	-frac 1.0

	# remove temporary directory
	rm -r $map_folder/temp_mask
endif

###################### generate scripts  ########################
# gen_group_command.py settings:
	# add -Clustsim option to run 3dClustSim

# set model
set m = Large-Small_allED_GLT 
  
# generate ttest script -- pos vs. negative quadratic slope - grams
gen_group_command.py -command 3dttest++                                     \
    -write_script $map_folder/q_quadsign_2sampleT++_${m}             \
    -prefix  q_quadsign_2sampleT++_${m}                             \
    -dsets $lev1_dir/*/$lev1_results/stats.sub-???+tlrc.HEAD              \
    -dset_sid_list `cat $index_negquad_g`                                                 \
    -dsets $lev1_dir/*/$lev1_results/stats.sub-???+tlrc.HEAD              \
    -dset_sid_list `cat $index_posquad_g`		                           \
    -set_labels negquad posquad		                        \
    -subs_betas "${m}"'#'0_Coef			                          \
    -options		-toz		                             \
        -mask $map_folder/quad_mask0.8+tlrc.HEAD -covariates $map_folder/fmri_covariates.csv"'[0,17,18,21,22]'"

# generate ttest script -- pos vs. negative quadratic slope - kcal
gen_group_command.py -command 3dttest++                                     \
    -write_script $map_folder/kcal_quadsign_2sampleT++_${m}             \
    -prefix  kcal_quadsign_2sampleT++_${m}                             \
    -dsets $lev1_dir/*/$lev1_results/stats.sub-???+tlrc.HEAD              \
    -dset_sid_list `cat $index_negquad_kcal`                                                 \
    -dsets $lev1_dir/*/$lev1_results/stats.sub-???+tlrc.HEAD              \
    -dset_sid_list `cat $index_posquad_kcal`		                           \
    -set_labels negquad posquad		                        \
    -subs_betas "${m}"'#'0_Coef			                          \
    -options		-toz		                             \
        -mask $map_folder/quad_mask0.8+tlrc.HEAD -covariates $map_folder/fmri_covariates.csv"'[0,17,18,21,22]'"

if ( "$2" == "run" ) then
    cd $map_folder
    tcsh q_quadsign_2sampleT++_${m}
    tcsh kcal_quadsign_2sampleT++_${m}
endif

# Copy base template into results folder 
if ( ! -f $basedset ) then
    echo "***** Failed to find $basedset :("
    exit 1
else
    if ( ! -f $map_folder/$basedset_name ) then
        cp ${basedset} $map_folder
    endif
endif



