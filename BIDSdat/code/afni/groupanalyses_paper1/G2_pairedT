#!/bin/tcsh
#
#useage: G2_2sample-pairedT   $1            $2        $3
#		     				template	  execute?  entire censor string 
#
# The purpose of this script is to create and run 2 sample paired t-tests of all conditions of interest
# $1: ped or MNI
# $2 run or no
# $3 e.g., fd-0.9_by-block-7_3blocks, fd-0.9_b20_3runs

###################### set up initial variables  ###########################   
#don't log AFNI programs in ~/.afni.log
setenv AFNI_DONT_LOGFILE YES

#dont try version checks
setenv ANFI_VRSION_CHECK NO

##don't auto-compress output files
setenv AFNI_COMPRESSOR NONE

###################### setup and check directories  ###########################   
#go to and set BIDS main directory
cd ../../../
set bidsdir = "$cwd"

#set level1 dir
set lev1_dir = $bidsdir/derivatives/analyses/foodcue-paper1/level1

#set test directory
set test_dir = $bidsdir/derivatives/analyses/foodcue-paper1/level2/2sample-pairedT

# set index dir
set index_dir = $bidsdir/derivatives/analyses/foodcue-paper1/level2

#set output name
set today = `date +%m-%d-%y`

# set censor string
set censor_str = $3

# set path to templates
set tpath = $bidsdir/derivatives/analyses/FoodCue-fmri/templates

##Get template specific results folder
if ( "$1" == "MNI" ) then
	##Get MNI template impelemented in 1_sswarp_strct
	set basedset = $tpath/tpl-MNI152NLin2009cAsym/tpl-MNI152NLin2009cAsym_res-01_T1w.nii.gz
	set basedset_name = "tpl-MNI152NLin2009cAsym_res-01_T1w.nii.gz"
	# set string
    	set temp = "MNI152NLin2009cAsym"
	set tempst = "MNI"
else
	##Get pediatric template used in fmriprep
	set basedset = $tpath/tpl-MNIPediatricAsym/cohort-3/tpl-MNIPediatricAsym_cohort-3_res-1_T1w.nii.gz
	set basedset_name = "tpl-MNIPediatricAsym_cohort-3_res-1_T1w.nii.gz"
	# set strings
	set temp = "MNIPediatricAsym_cohort-3"
	set tempst = "ped"
endif


# set lev1 results directory name
set lev1split = ($lev1_str:as/_/ /)
set lev1_results = ${tempst}_$lev1split[1]_$lev1split[2]_$lev1split[4]

# get censor str for index file
set censor_str = $lev1split[1]_$lev1split[2]_$lev1split[3]

#set map folder
set map_folder = $test_dir/${tempst}_${lev1_str}_${today}

#create map folder
if ( ! -d $map_folder ) then
    mkdir -p $map_folder
else
	# remove and create new map folder
	rm -r $map_folder
	mkdir -p $map_folder
endif


###################### generate scripts  ########################
#loop though all conditions/contrasts of interest

#set groups = ( WholeGroup HighRisk LowRisk )
set groups = ( WholeGroup )

foreach group ( $groups )

	# set index list
	if ( "$group" == "WholeGroup" ) then
       		set fileG = "WG"
               	set index = `cat $index_dir/index_all_${censor_str}.txt`
        else if ( "$group" == "HighRisk" ) then
               	set index = `cat $index_dir/index_highrisk_${censor_str}.txt`
               	set fileG = "HR"
        else if ( "$group" == "LowRisk" ) then
                set index = `cat $index_dir/index_lowrisk_${censor_str}.txt`
               	set fileG = "LR"
	endif

	# generate mask for analyses if it doesnt exist
	if (! -f $map_folder/${fileG}_mask0.8+tlrc.HEAD ) then
		
		# make temporary directory with participant masks for subjects included in analyses
		mkdir $map_folder/temp_mask
        	foreach sub ( $index )
			cp ${bidsdir}/derivatives/preprocessed/fmriprep/sub-${sub}/ses-1/func/foodcue_full_mask-${temp}*.nii $map_folder/temp_mask/mask_sub-${sub}.nii
                end

		# generate mask with 80% of participants overlapping
		3dmask_tool -input $map_folder/temp_mask/mask* \
                              -prefix $map_folder/${fileG}_mask0.8+tlrc              \
                              -frac 0.8

                # remove temporary directory
                rm -r $map_folder/temp_mask
	endif

	###################### High_v_Low PS contrast ######################
	set output_name = "High_v_Low_PScon"
        
	#toz-when using zskip need to convert t to z because voxel
	#may have different number of samples
	gen_group_command.py -command 3dttest++                                            \
		    -write_script $map_folder/${fileG}_2sampleT++_${output_name}           \
		    -prefix  ${fileG}_2sampleT++_${output_name}                           \
		    -dsets $lev1_dir/*/$lev1_results/stats.sub-???+tlrc.HEAD               \
		    -dset_sid_list $index						   \
		    -set_labels HighLarge-Small LowLarge-Small                             \
		    -subs_betas HighLarge-Small_GLT'#'0_Coef LowLarge-Small_GLT'#'0_Coef   \
		    -options								   \

				-paired -mask $map_folder/${fileG}_mask0.8+tlrc -toz -covariates $index_dir/ttest-covariates.txt"'[0,1,2,3]'"
	chmod 775 $map_folder/${fileG}_2sampleT++_${output_name}

	if ( "$2" == "run" ) then
		cd $map_folder
		tcsh ${fileG}_2sampleT++_${output_name}
    	endif

end

# Copy base template into results folder 

if ( ! -f $basedset ) then
    echo "***** Failed to find $basedset :("
    exit 1
else
    if ( ! -f $map_folder/$basedset_name ) then
        cp ${basedset} $map_folder
    endif
endif

