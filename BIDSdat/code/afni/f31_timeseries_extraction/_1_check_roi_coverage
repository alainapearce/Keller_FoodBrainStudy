#!/bin/bash
#usage: ./1_check_roi_coverage     $1             
#		                        ParicipantID
#
#
#useage:
#
# This script assesses whether subject has complete coverage of ROIs based on food cue mask
# Written by Bari Fuchs

###################### set up initial variables  ###########################

#set input argument 1 to variable 'subID' and make sure it has leading zeros

#remove leading zeros if they were included -- trying to add leading zeros to numbers with leading zeros can lead to issues (https://stackoverflow.com/questions/8078167/printf-in-bash-09-and-08-are-invalid-numbers-07-and-06-are-fine)
ID_nozero=$(echo $1 | sed 's/^0*//')

# add leading zeros back
ID=`printf %03d $ID_nozero`
subID="sub-$ID"

###################### setup and check directories  ########################### 

#go to and set BIDS main directory
cd ../../../
bidsdir=$(pwd)

#set roi directories
roidir="$bidsdir/derivatives/analyses/foodcue-paper3/rois/" #directory with ROI spheres
coveragedir="$roidir/coverage_masks/" #directory to store coverage masks

#check roi directories exists
if [ ! -d "$roidir" ]; then
	echo "roi dir does not exist"
	exit
else
	if [ ! -d "$coveragedir" ]; then
        echo "making mask coverage directory"
		mkdir "$coveragedir"
	fi
fi

#set subjects level1 dir
sub_lev1_dir="$bidsdir/derivatives/analyses/foodcue-paper3/level1/$subID/"

###################### Generate ROI coverage mask ########################### 

# sum tmp_roi_mask and food cue mask, save output mask in coveragedir
#	Output mask will have the following values:
#	-2 = roi mask only
#	 1 = food cue mask only
#	-1 = in roi mask and food cue mask

if [ ! -f "$coveragedir/${subID}_roi_coverage_mask+tlrc.BRIK" ]; then
    echo "generating ROI coverage mask for $subID"
    3dMean \
        -sum    \
        -prefix $coveragedir/${subID}_roi_coverage_mask \
        $roidir/rois_mask_neg2+tlrc $sub_lev1_dir/foodcue_full_mask-MNIPediatricAsym_cohort-3_res-1.nii
else
    echo "ROI coverage mask already exists for $subID"
fi

# ###################### check ROI coverage ########################### 

echo "checking ROI coverage for $subID"

# extract the minimum value that exists in the roi_coverage mask 
sum_min=`3dinfo -min $coveragedir/${subID}_roi_coverage_mask+tlrc`

# set coverage_status variable
if [ "$sum_min" -eq -2 ]; then
    coverage_status=0 # indicates incomplete coverage of ROIs
else
    coverage_status=1 # indicates full coverage of ROIs
fi

# save coverage status to tab delimited txt file
if [ ! -f "$coveragedir/summary_coverage_status.txt" ]; then

    # write columns names, -e  enables the interpretation of backslash escapes for \t as a tab separator.
    echo -e "sub\tcoverage_status" > $coveragedir/summary_coverage_status.txt

    # export subID and coverage status 
    echo "writing coverage status for $subID"
    echo -e "$subID\t$coverage_status" >> $coveragedir/summary_coverage_status.txt

else
    # check if subID already in the summary file
    if grep -q "^$subID" "$coveragedir/summary_coverage_status.txt"; then
        # delete the row containing subID
        sed -i "/^$subID/d" "$coveragedir/summary_coverage_status.txt"
    fi

    # append subID and coverage status 
    echo "overwriting coverage status for $subID"
    echo -e "$subID\t$coverage_status" >> $coveragedir/summary_coverage_status.txt
fi