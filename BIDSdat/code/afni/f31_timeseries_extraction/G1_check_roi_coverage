#!/bin/bash
#usage: ./1_check_roi_coverage     $1             
#		                        ParicipantID
#
#
#useage:
#
# This script assesses whether subject has complete coverage of ROIs based on food cue mask
# Written by Bari Fuchs

###################### set up initial variables  ###########################

#set input argument 1 to variable 'subID' and make sure it has leading zeros

#remove leading zeros if they were included -- trying to add leading zeros to numbers with leading zeros can lead to issues (https://stackoverflow.com/questions/8078167/printf-in-bash-09-and-08-are-invalid-numbers-07-and-06-are-fine)
ID_nozero=$(echo $1 | sed 's/^0*//')

# add leading zeros back
ID=`printf %03d $ID_nozero`
subID="sub-$ID"

###################### setup and check directories  ########################### 

#go to and set BIDS main directory
cd ../../../
set bidsdir = "$cwd"

#set roi directories
set roidir = $bidsdir/derivatives/analyses/foodcue-paper3/rois/ #directory with ROI spheres
set coveragedir = $roidir/coverage_masks/ #directory to store coverage masks

#check roi directories exists
if ( ! -d $roidir ) then
	echo "roi dir does not exist"
	exit
else
	if ( ! -d $coveragedir ) then
		mkdir $coveragedir
	endif
endif

#set subjects level1 dir
set sub_lev1_dir =  $bidsdir/derivatives/analyses/foodcue-paper3/level1/$subID/

###################### Generate ROI coverage mask ########################### 

# sum tmp_roi_mask and food cue mask, save output mask in coveragedir
#	Output mask will have the following values:
#	-2 = roi mask only
#	 1 = food cue mask only
#	-1 = in roi mask and food cue mask

if ( ! -f $coveragedir/${subID}_roi_coverage_mask* ) then
    3dMean \
        -sum    \
        -prefix $coveragedir/${subID}_roi_coverage_mask \
        $roidir/rois_mask_neg2+tlrc $sub_lev1_dir/foodcue_full_mask-MNIPediatricAsym_cohort-3_res-1.nii \
else
    echo "ROI coverage mask already exists for $subID"
endif

###################### check ROI coverage ########################### 

# extract the minimum value that exists in the roi_coverage mask 
set sum_min = `3dinfo -min $coveragedir/${subID}_roi_coverage_mask+tlrc`

if ( ${sum_min} == -2 ) then
    echo "** ERROR! Voxels in ROIs but not food cue mask"
    set coverage_status = 0
else
    echo "++ OK: Full coverage of ROIs"
    set coverage_status = 1
endif

# save coverage status to tab delimited txt file
if ( ! -f $coveragedir/summary_coverage_status.txt ) then

    # export subID and coverage status 
    echo "$subID\t$coverage_status" >> summary_coverage_status.txt

else
    # Delete subect row if they already exist in summary_coverage_status.txt
    #   awk checks the first column ($1) of each row and compares it to delete_num. 
    #   If the first column is not equal to delete_num, awk prints the row to standard output. 
    #   The output of awk is then redirected to a temporary file (tmpfile) using >
    #   use mv to overwrite the original summary_coverage_status.txt file with the contents of tmpfile
    awk -v delete_num="$subID" '$1 != delete_num' summary_coverage_status.txt > tmpfile && mv tmpfile summary_coverage_status.txt

    # export subID and coverage status 
    echo "$subID\t$coverage_status" >> summary_coverage_status.txt
endif
