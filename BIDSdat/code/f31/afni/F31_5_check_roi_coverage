#!/bin/bash
#
#useage: bash 2_check_roi_coverage     $1             
#		                        ParicipantID
#
# This script assesses whether a given subject has complete coverage of ROIs based on food cue mask, by run
# Written by Bari Fuchs

###################### set up initial variables  ###########################

#set input argument 1 to variable 'subID' and make sure it has leading zeros

#remove leading zeros if they were included -- trying to add leading zeros to numbers with leading zeros can lead to issues (https://stackoverflow.com/questions/8078167/printf-in-bash-09-and-08-are-invalid-numbers-07-and-06-are-fine)
ID_nozero=$(echo $1 | sed 's/^0*//')

# add leading zeros back
ID=`printf %03d $ID_nozero`
subID="sub-$ID"

###################### setup and check directories  ########################### 

#go to and set BIDS main directory
cd ../../../
bidsdir=$(pwd)

#set directories
subfunc_dir="$bidsdir/derivatives/preprocessed/fmriprep/$subID/ses-1/func" #subject's fmriprep func directory
f31_dir="$bidsdir/derivatives/analyses/f31"
roi_dir="$f31dir/rois/" #directory with ROI spheres
submask_dir="$f31dir/foodcue_masks/$subID" #directory to store subject's food cue and coverage masks

#check for necessary directories/files
if [ ! -d "$roidir" ]; then 
	echo "roi dir does not exist"
	exit
else
    if [ ! -d "$subfunc_dir" ]; then
        echo "$subID does not have fmriprep func dir"
        exit
    fi
else
    if [ ! -f "$subfunc_dir/foodcue_full_mask-MNIPediatricAsym_cohort-3_res-1.nii" ]; then
	    echo "$subID foodcue masks from fmriprep not found"
	    exit
    fi
fi

# make submask_dir if it doesnt exist
if [ ! -d "$coveragedir" ]; then
        echo "making mask directory"
		mkdir -p "$submask_dir"
fi

###################### Copy masks from fmriprep  ########################### 
cp $fmriprep_subdir/${subID}_ses-1_task-foodcue_run-?_space-MNIPediatricAsym_cohort-3_res-1_desc-brain_mask.nii.gz $submask_dir


###################### Check coverage by run  ########################### 

# get array of run numbers
run_array=()

for file in "$submask_dir"/*brain_mask*; do
    if [ -f "$file" ]; then

        # Extract the digit after "run-" using parameter expansion
        runnum=$(basename "$file" | sed 's/.*run-\([0-9]\+\).*/\1/')
        
        # Append the extracted digit to the array
        run_array+=("$runnum")
    fi
done


for run in $run_array

    ###################### Generate ROI coverage mask ########################### 

    # sum tmp_roi_mask and food cue mask, save output mask in coveragedir
    #	Output mask will have the following values:
    #	-2 = roi mask only
    #	 1 = food cue mask only
    #	-1 = in roi mask and food cue mask

    if [ ! -f "$submask_dir/${subID}_run${run}_roi_coverage_mask+tlrc.BRIK" ]; then
        echo "generating ROI coverage mask for $subID run $run"
        3dMean \
            -sum    \
            -prefix $submask_dir/${subID}_run${run}_roi_coverage_mask \
            $roidir/rois_mask_neg2+tlrc $submask_dir/${subID}_ses-1_task-foodcue_run-${run}_space-MNIPediatricAsym_cohort-3_res-1_desc-brain_mask.nii.gz
    else
        echo "ROI coverage mask already exists for $subID run $run"
    fi

    # ###################### check ROI coverage ########################### 

    echo "checking ROI coverage for $subID run $run"

    # extract the minimum value that exists in the roi_coverage mask 
    sum_min=`3dinfo -min $submask_dir/${subID}_run${run}_roi_coverage_mask+tlrc`

    # set coverage_status variable
    if [ "$sum_min" -eq -2 ]; then
        coverage_status=0 # indicates incomplete coverage of ROIs
    else
        coverage_status=1 # indicates full coverage of ROIs
    fi

    # save coverage status to tab delimited txt file
    if [ ! -f "$f31dir/foodcue_masks/summary_coverage_status.txt" ]; then

        # write columns names, -e  enables the interpretation of backslash escapes for \t as a tab separator.
        echo -e "sub\trun\tcoverage_status" > $coveragedir/summary_coverage_status.txt

        # export subID and coverage status 
        echo "writing coverage status for $subID"
        echo -e "$subID\t$run\t$coverage_status" >> $f31dir/foodcue_masks/summary_coverage_status.txt

    else
        # check if subID already in the summary file
        if grep -q "^$subID" "$f31dir/foodcue_masks/summary_coverage_status.txt"; then
            # delete the row containing subID
            sed -i "/^$subID/d" "$f31dir/foodcue_masks/summary_coverage_status.txt"
        fi

        # append subID and coverage status 
        echo "overwriting coverage status for $subID run $run"
        echo -e "$subID\t$run\t$coverage_status" >> $f31dir/foodcue_masks/summary_coverage_status.txt
    fi
done