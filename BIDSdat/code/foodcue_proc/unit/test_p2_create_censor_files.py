#!/usr/bin/env python3
# -*- coding: utf-8 -*-


#set up packages
import pytest
import pandas as pd
import numpy as np
from pathlib import Path
import os
from pandas.testing import assert_frame_equal
import sys

# import functions to test
from p2_create_censor_files import _gen_concatenated_regressor_file
from p2_create_censor_files import _gen_run_int_list
from p2_create_censor_files import _get_run_censor_info
from p2_create_censor_files import _get_censorsum_bycond

####################
##### Fixtures #####
####################

@pytest.fixture
def confound_dat_fixture():

    confound_dat = pd.DataFrame(np.zeros((80, 3)))
    confound_dat.columns = ['framewise_displacement','std_dvars', 'non_steady_state_outlier00']
    # use np.r_ to concatenate array slices. without np.r_, slices will be inclusive
    confound_dat.at[np.r_[:20, 40:46],["framewise_displacement"]] = 1.1 # set rows 0:20 & 40:46 to have framewise displacement of 1.1
    confound_dat.at[np.r_[50:60],["std_dvars"]] = 1.1                   # set rows 50:55 to have std_dvars of 1.1
    confound_dat.at[np.r_[75:79],["non_steady_state_outlier00"]] = 1    # set rows 75:79 to have framewise displacement of 1.1

    return confound_dat

@pytest.fixture
def r_int_list_fixture():

    # Make list of 1s and 0s, where 1 indicates TR of interest, 0 indicates TR of no interest
    r_int_list = [0] * 80 # make list of zeros
    r_int_list[2:11] = [1, 1, 1, 1, 1, 1, 1, 1, 1]    #At indices 2:11 in r_int_list, set value to 1
    r_int_list[15:24] = [1, 1, 1, 1, 1, 1, 1, 1, 1]   #At indices 15:24 in r_int_list, set value to 1
    r_int_list[28:37] = [1, 1, 1, 1, 1, 1, 1, 1, 1]   #At indices 28:37 in r_int_list, set value to 1
    r_int_list[41:50] = [1, 1, 1, 1, 1, 1, 1, 1, 1]   #At indices 41:50 in r_int_list, set value to 1
    r_int_list[54:63] = [1, 1, 1, 1, 1, 1, 1, 1, 1]   #At indices 54:63 in r_int_list, set value to 1
    r_int_list[67:76] = [1, 1, 1, 1, 1, 1, 1, 1, 1]   #At indices 67:76 in r_int_list, set value to 1

    return r_int_list

@pytest.fixture
def block_onsets_TR_dict_fixture():
    
    block_onsets_TR_dict_999 = {'OfficeSmall': 67, 'LowLarge': 28, 'HighSmall': 15, 'HighLarge': 2, 'LowSmall': 41, 'OfficeLarge': 54}

    return block_onsets_TR_dict_999

@pytest.fixture
def censor_info_fixture():

    # Make lists of 1s and 0s, where 1 indicates uncensored TR, 0 indicates censored TR. 
    # Lists will be based on dataframe generated by confound_dat_fixture()
    # Note: first 2 TRs should always be censored, non_steady_state_outlier00 = 1 should always be censored

    # if censoring for framewise displacement > 1
    fd_1 = [1] * 80
    index_list = list(range(0,20)) + list(range(40,46)) + list(range(75,79))
    for i in range(len(fd_1)):
            if i in index_list:
                fd_1[i] = 0

    # if censoring for framewise displacement > 1 and stddvar > 1
    fd1_stddvar1 = [1] * 80
    index_list = list(range(0,20)) + list(range(40,46)) + list(range(75,79)) + list(range(50,60))
    for i in range(len(fd1_stddvar1)):
            if i in index_list:
                fd1_stddvar1[i] = 0

    # if censoring for framewise displacement > 1, and censoring previous TR if framewise displacement > 1
    fd1_cpt = [1] * 80
    index_list = list(range(0,20)) + list(range(40,46)) + list(range(75,79)) + [39]
    for i in range(len(fd1_cpt)):
            if i in index_list:
                fd1_cpt[i] = 0

    # put lists into a dictionary
    censor_info_dict = {} # make empty dictionary
    censor_info_dict["fd-1.0"] = fd_1
    censor_info_dict["fd-1.0_stddvar-1.0"] = fd1_stddvar1
    censor_info_dict["fd-1.0_cpt"] = fd1_cpt

    return censor_info_dict

@pytest.fixture
def bycond_run_row_fixture():

    row_fd1 = {'sub':[999], 'run': [1], 'HighLarge': [0], 'HighSmall': [4], 'LowLarge': [9], 'LowSmall': [4], 'OfficeLarge': [9], 'OfficeSmall': [8]}
    row_fd1_stddvar1 = {'sub':[999], 'run': [1], 'HighLarge': [0], 'HighSmall': [4], 'LowLarge': [9], 'LowSmall': [4], 'OfficeLarge': [3], 'OfficeSmall': [8]}
    row_fd1_cpt = {'sub':[999], 'run': [1], 'HighLarge': [0], 'HighSmall': [4], 'LowLarge': [9], 'LowSmall': [4], 'OfficeLarge': [9], 'OfficeSmall': [8]}

    bycond_row_fd1 = pd.DataFrame(data=row_fd1)
    bycond_row_fd1_stddvar1 = pd.DataFrame(data=row_fd1_stddvar1)
    bycond_row_fd1_cpt = pd.DataFrame(data=row_fd1_cpt)

    # put dataframes into a dictionary
    goodTR_bycond_dict = {} # make empty dictionary
    goodTR_bycond_dict["fd-1.0"] = bycond_row_fd1
    goodTR_bycond_dict["fd-1.0_stddvar-1.0"] = bycond_row_fd1_stddvar1
    goodTR_bycond_dict["fd-1.0_cpt"] = bycond_row_fd1_cpt

    return goodTR_bycond_dict
    
#################
##### Tests #####
#################

# def test_gen_concatenated_regressor_file(confound_files_fixture, regress_pardat_fixture):

#     # run function
#     regress_Pardat = _gen_concatenated_regressor_file(confound_files_fixture)
    
#     # check function output
#     assert regress_Pardat == regress_pardat_fixture, "error"

def test_gen_run_int_list(confound_dat_fixture, r_int_list_fixture, block_onsets_TR_dict_fixture):

    # set path to fixture onset files
    bids_origonset_path = str('/Users/baf44/Keller_FoodBrainStudy/BIDSdat/code/foodcue_proc/fixtures/preprocessed/foodcue_onsetfiles/orig')

    # get original onset test data
    orig_onsetfiles = list(Path(bids_origonset_path).rglob('sub-999*AFNIonsets.txt'))

    # # run function
    r_int_list, block_onsets_TR_dict = _gen_run_int_list(orig_onsetfiles, confound_dat_fixture, runnum = 1)

    # check function output
    assert r_int_list == r_int_list_fixture
    assert block_onsets_TR_dict == block_onsets_TR_dict_fixture

def test_get_run_censor_info(confound_dat_fixture, r_int_list_fixture, censor_info_fixture):

    # run function with 3 different censor criteria
    res = _get_run_censor_info(confound_dat_fixture, 
                                FD_thresh = 1.0, 
                                std_dvars_thresh = False, 
                                r_int_info = r_int_list_fixture, 
                                cen_prev_TR_flag=False)

    res2 = _get_run_censor_info(confound_dat_fixture, 
                                FD_thresh = 1.0, 
                                std_dvars_thresh = 1.0, 
                                r_int_info = r_int_list_fixture, 
                                cen_prev_TR_flag=False)
    # run function
    res3 = _get_run_censor_info(confound_dat_fixture, 
                                FD_thresh = 1.0, 
                                std_dvars_thresh = False, 
                                r_int_info = r_int_list_fixture, 
                                cen_prev_TR_flag=True)

    # check function censor_info output
    assert censor_info_fixture["fd-1.0"] == res[0]
    assert censor_info_fixture["fd-1.0_stddvar-1.0"] == res2[0]
    assert censor_info_fixture["fd-1.0_cpt"] == res3[0]

    # check function p_censored output res[3] -- see test_censor_tr_count.xlsx for expected value calculations
    assert 35.9 == res[3]
    assert 48.7 == res2[3]
    assert 37.2 == res3[3]

    # check function p_censored_int output res[6] -- see test_censor_tr_count.xlsx for expected value calculations 
    assert 37.0 == res[6]
    assert 48.1 == res2[6]
    assert 37.0 == res3[6]



def test_get_censorsum_bycond(censor_info_fixture, block_onsets_TR_dict_fixture, bycond_run_row_fixture):

    # run function with 3 different censor criteria
    bycond_row_fd1 = _get_censorsum_bycond(block_onsets_TR_dict_fixture, censor_info_fixture["fd-1.0"], sub = 999, runnum = 1)
    bycond_row_fd1_stddvar1 = _get_censorsum_bycond(block_onsets_TR_dict_fixture, censor_info_fixture["fd-1.0_stddvar-1.0"], sub = 999, runnum = 1)
    bycond_row_fd1_cpt = _get_censorsum_bycond(block_onsets_TR_dict_fixture, censor_info_fixture["fd-1.0_cpt"], sub = 999, runnum = 1)

    # check function output -- use assert_frame_equal to compare dataframes
    assert_frame_equal(bycond_row_fd1,bycond_run_row_fixture["fd-1.0"])
    assert_frame_equal(bycond_row_fd1_stddvar1,bycond_run_row_fixture["fd-1.0_stddvar-1.0"])
    assert_frame_equal(bycond_row_fd1_cpt,bycond_run_row_fixture["fd-1.0_cpt"])