#!/usr/bin/env python3
# -*- coding: utf-8 -*-


#set up packages
import pytest
import pandas as pd
import numpy as np

# import functions to test
from p2_create_censor_files import _gen_concatenated_regressor_file
from p2_create_censor_files import _gen_run_int_list
from p2_create_censor_files import _get_run_censor_info
from p2_create_censor_files import _get_censorsum_bycond

####################
##### Fixtures #####
####################

@pytest.fixture
def confound_dat_fixture():

    confound_dat = pd.DataFrame(np.zeros((80, 3)))
    confound_dat.columns = ['framewise_displacement','std_dvars', 'non_steady_state_outlier00']
    # use np.r_ to concatenate array slices. without np.r_, slices will be inclusive
    confound_dat.at[np.r_[:20, 40:46],["framewise_displacement"]] = 1.1 # set rows 0:20 & 40:46 to have framewise displacement of 1.1
    confound_dat.at[np.r_[50:55],["std_dvars"]] = 1.1                   # set rows 50:55 to have std_dvars of 1.1
    confound_dat.at[np.r_[75:79],["non_steady_state_outlier00"]] = 1    # set rows 75:79 to have framewise displacement of 1.1

    return confound_dat

@pytest.fixture
def r_int_list_fixture():

    # Make list of 1s and 0s, where 1 indicates TR of interest, 0 indicates TR of no interest
    r_int_list = [0] * 80 # make list of zeros
    r_int_list[2:11] = [1, 1, 1, 1, 1, 1, 1, 1, 1]    #At indices 2:11 in r_int_list, set value to 1
    r_int_list[15:24] = [1, 1, 1, 1, 1, 1, 1, 1, 1]   #At indices 15:24 in r_int_list, set value to 1
    r_int_list[28:37] = [1, 1, 1, 1, 1, 1, 1, 1, 1]   #At indices 28:37 in r_int_list, set value to 1
    r_int_list[41:50] = [1, 1, 1, 1, 1, 1, 1, 1, 1]   #At indices 41:50 in r_int_list, set value to 1
    r_int_list[54:63] = [1, 1, 1, 1, 1, 1, 1, 1, 1]   #At indices 54:63 in r_int_list, set value to 1
    r_int_list[67:76] = [1, 1, 1, 1, 1, 1, 1, 1, 1]   #At indices 67:76 in r_int_list, set value to 1

    return r_int_list

@pytest.fixture
def censor_info_fixture():

    # Make lists of 1s and 0s, where 1 indicates uncensored TR, 0 indicates censored TR. 
    # Lists will be based on dataframe generated by confound_dat_fixture()
    # Note: first 2 TRs should always be censored, non_steady_state_outlier00 = 1 should always be censored

    # if censoring for framewise displacement > 1
    fd_1 = [1] * 80
    index_list = list(range(0,20)) + list(range(40,46)) + list(range(75,79))
    for i in range(len(fd_1)):
            if i in index_list:
                fd_1[i] = 0

    # if censoring for framewise displacement > 1 and stddvar > 1
    fd1_stddvar1 = [1] * 80
    index_list = list(range(0,20)) + list(range(40,46)) + list(range(75,79)) + list(range(50,55))
    for i in range(len(fd1_stddvar1)):
            if i in index_list:
                fd1_stddvar1[i] = 0

    # if censoring for framewise displacement > 1, and censoring previous TR if framewise displacement > 1
    fd1_cpt = [1] * 80
    index_list = list(range(0,20)) + list(range(40,46)) + list(range(75,79)) + [39]
    for i in range(len(fd1_cpt)):
            if i in index_list:
                fd1_cpt[i] = 0

    # put lists into a dictionary
    censor_info_dict = {} # make empty dictionary
    censor_info_dict["fd-1.0"] = fd_1
    censor_info_dict["fd-1.0_stddvar-1.0"] = fd1_stddvar1
    censor_info_dict["fd-1.0_cpt"] = fd1_cpt

    return censor_info_dict


#################
##### Tests #####
#################

def test_fixture(confound_dat_fixture):
    assert isinstance(confound_dat_fixture, pd.DataFrame) == True

# def test_gen_concatenated_regressor_file(confound_files_fixture, regress_pardat_fixture):

#     # run function
#     regress_Pardat = _gen_concatenated_regressor_file(confound_files_fixture)
    
#     # check function output
#     assert regress_Pardat == regress_pardat_fixture, "error"

#def test_gen_run_int_list(confound_dat_fixture, r_int_list_fixture, block_onsets_TR_dict_fixture):
#    # # run function
#    r_int_list, block_onsets_TR_dict = _gen_run_int_list(bids_origonset_path, sub = 999, confound_dat_fixture, runnum)

#     # check function output
#    assert r_int_list == r_int_list_fixture, "r_int_list error"
#    assert block_onsets_TR_dict == block_onsets_TR_dict_fixture, "block_onsets_TR_dict error"

def test_get_run_censor_info(confound_dat_fixture, r_int_list_fixture, censor_info_fixture):

    # run function w/F
    res = _get_run_censor_info(confound_dat_fixture, 
                                FD_thresh = 1.0, 
                                std_dvars_thresh = False, 
                                r_int_info = r_int_list_fixture, 
                                cen_prev_TR_flag=False)
    # check function output
    assert censor_info_fixture["fd-1.0"] == res[0]

    # run function
    res2 = _get_run_censor_info(confound_dat_fixture, 
                                FD_thresh = 1.0, 
                                std_dvars_thresh = 1.0, 
                                r_int_info = r_int_list_fixture, 
                                cen_prev_TR_flag=False)
    # check function output
    assert censor_info_fixture["fd-1.0_stddvar-1.0"] == res2[0]

    # run function
    res3 = _get_run_censor_info(confound_dat_fixture, 
                                FD_thresh = 1.0, 
                                std_dvars_thresh = False, 
                                r_int_info = r_int_list_fixture, 
                                cen_prev_TR_flag=True)
    # check function output
    assert censor_info_fixture["fd-1.0_cpt"] == res3[0]



#def test_get_censorsum_bycond():
    #bycond_run_row = _get_censorsum_bycond(block_onsets_TR_dict, run_censordata, sub = 999, runnum) 