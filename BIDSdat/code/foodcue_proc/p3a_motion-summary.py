#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
This script was created to summarize motion info from censorysummary files generated by 4_create_censor_files. 

Written by Bari Fuchs in Summer 2022

Copyright (C) 20120 Bari Fuchs

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see <https://www.gnu.org/licenses/>.
     
This script is not guaranteed to work for new data or under new directory 
configurations, however, it should work if no changes are made to directories
or raw data configurations.

@author: baf44
"""

#set up packages    
from email import header
from pickle import TRUE
from aem import con
import numpy as np
import pandas as pd
import os
from pathlib import Path

##############################################################################
####                                                                      ####
####                             Core Script                              ####
####                                                                      ####
##############################################################################

# get script location
script_path = Path(__file__).parent.resolve()

# change directory to base directory (BIDSdat) and get path
os.chdir(script_path)
os.chdir('../..')
base_directory = Path(os.getcwd())

#set specific paths
bids_onset_path = Path(base_directory).joinpath('derivatives/preprocessed/foodcue_onsetfiles')
bids_origonset_path = Path(base_directory).joinpath('derivatives/preprocessed/foodcue_onsetfiles/orig')
bids_fmriprep_path = Path(base_directory).joinpath('derivatives/preprocessed/fmriprep')

#find all censor summary files
censorsum_files = list(Path(bids_fmriprep_path).rglob('task-foodcue_censorsummary*'))

#make motion count summary table
mot_sum = pd.DataFrame(np.zeros((len(censorsum_files), 7)))
mot_sum.columns = ['censorsum','n_total', 'n_r20thresh', 'n_b20thresh', 'n_b25thresh', 'n_r10b20thresh', 'n_r20b20thresh']

# set minimum number of acceptable runs for inclusion in analyses
nrun_min = 2

for i in range(len(censorsum_files)):

    file = censorsum_files[i]

    # set subject counts to zero for each criteria
    n_r20thresh = 0
    n_b20thresh = 0
    n_b25thresh = 0
    n_r10b20thresh = 0
    n_r20b20thresh = 0

    # load file
    censorsum_df = pd.read_csv(str(file), sep = '\t', encoding = 'utf-8-sig', engine='python')

    # extract file name without .tsv
    filename = os.path.basename(file).split('.tsv')[0]

    # get unique subjects
    subs = censorsum_df['sub'].unique()

    for sub in subs:
        # subset dataframe
        sub_df = censorsum_df.loc[censorsum_df['sub'] == sub]

        # count number of rows with p_censor < 20
        run_count_r20 = (sub_df['p_censor'] < 20).sum()
        if run_count_r20 >= nrun_min:
            n_r20thresh = n_r20thresh + 1

        # count number of rows with p_censor_interest < 20
        run_count_b20 = (sub_df['p_censor_interest'] < 20).sum()
        if run_count_b20 >= nrun_min:
            n_b20thresh = n_b20thresh + 1

        # count number of rows with p_censor_interest < 20
        run_count_b25 = (sub_df['p_censor_interest'] < 25).sum()
        if run_count_b25 >= nrun_min:
            n_b25thresh = n_b25thresh + 1

        # count number of rows with p_censor < 10 & p_censor_interest < 20
        run_count_r10b20 = ((sub_df['p_censor'] < 10) & (sub_df['p_censor_interest'] < 20)).sum()
        if run_count_r10b20 >= nrun_min:
            n_r10b20thresh = n_r10b20thresh + 1

        # count number of rows with p_censor < 20 & p_censor_interest < 20
        run_count_r20b20 = ((sub_df['p_censor'] < 20) & (sub_df['p_censor_interest'] < 20)).sum()
        if run_count_r20b20 >= nrun_min:
            n_r20b20thresh = n_r20b20thresh + 1

    #add summary to table
    mot_sum['censorsum'].loc[i] = filename
    mot_sum['n_total'].loc[i] = len(subs)
    mot_sum['n_r20thresh'].loc[i] = n_r20thresh
    mot_sum['n_b20thresh'].loc[i] = n_b20thresh
    mot_sum['n_b25thresh'].loc[i] = n_b25thresh
    mot_sum['n_r10b20thresh'].loc[i] = n_r10b20thresh
    mot_sum['n_r20b20thresh'].loc[i] = n_r20b20thresh

# print summary table
print(mot_sum)