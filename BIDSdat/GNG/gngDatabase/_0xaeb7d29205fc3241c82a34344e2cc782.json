[('GNG_summary_dat', [   sub block  nGo nNoGo nAcc  ... A_prime_ll     c_mm     c_ll Grier_beta_mm Grier_beta_ll
0  113   all  150    50  166  ...   0.827762  1.59038  1.58655     -0.969924     -0.970289
1  113    b1   30    10   33  ...   0.814078  1.32622  1.30699     -0.855215     -0.863676
2  113    b2   30    10   32  ...   0.785909  1.48483  1.44453     -0.814173     -0.834258
3  113    b3   30    10   35  ...   0.864886  1.06402   1.0706     -0.876955     -0.880626
4  113    b4   30    10   33  ...   0.814078  1.32622  1.30699     -0.855215     -0.863676
5  113    b5   30    10   33  ...   0.814078  1.32622  1.30699     -0.855215     -0.863676

[6 rows x 32 columns]]), ('bids_dir', '/Users/azp271/OneDrive - The Pennsylvania State University/b-childfoodlab_Shared/Active_Studies/RO1_Brain_Mechanisms_IRB_5357/Participant_Data/BIDSdat'), ('function_str', "def updateDatabase_save(GNG_summary_dat, overwrite_flag, bids_dir):\n    import pandas as pd\n    import numpy as np\n    from pathlib import Path\n    from nipype.interfaces.base import Bunch\n\n    #check to see if it is filepath str or 'no files' message\n    if isinstance(GNG_summary_dat[0], str):\n\n        print('******** No new data to be processed ********')\n\n        GNG_database = 'no new data files'\n        GNG_database_long = 'no new data files'\n\n    else:\n        #get a Bunch object if more than 1 participant\n        if isinstance(GNG_summary_dat, Bunch):\n            #get output data from node\n            GNG_summary_datlist = GNG_summary_dat.summaryGNG_dat\n\n            #combine datasets\n            GNG_summary_dat = pd.concat(GNG_summary_datlist)\n\n        #if only 1 participant/dataset then it is a list\n        elif isinstance(GNG_summary_dat, list):\n            if len(GNG_summary_dat) == 1:\n                GNG_summary_dat = GNG_summary_dat[0]\n            else:\n                GNG_summary_dat = pd.concat(GNG_summary_dat)\n\n        #if a pandas dataframe\n        if isinstance(GNG_summary_dat, pd.DataFrame):\n\n            #get column names\n            columnnames = GNG_summary_dat.columns\n\n            print(GNG_summary_dat.sub)\n\n            #get condition subset (overall and each block)\n            #GNG_summary_dat['block'] = GNG_summary_dat['block'].astype(str)\n            GNG_summary_conditions = GNG_summary_dat[GNG_summary_dat.block.isin(['all', 'b1', 'b2', 'b3', 'b4', 'b5'])]\n\n            #make wide data set (for every variable, a column for overall and each block)\n            GNG_summary_wide = GNG_summary_conditions.pivot(columns='block', index='sub', values=columnnames[2:])\n            GNG_summary_wide.columns = ['_'.join(col) for col in GNG_summary_wide.columns.reorder_levels(order=[1, 0])]\n\n            #remove SDT variables by block from wide dataset\n            block_sdt_vars =    ['b1_z_Hit', 'b1_z_FA', 'b1_z_Hit_mm', 'b1_z_FA_mm', 'b1_z_Hit_ll', 'b1_z_FA_ll', 'b1_d_prime_mm',  'b1_d_prime_ll', 'b1_A_prime_mm', 'b1_A_prime_ll', 'b1_c_mm', 'b1_c_ll', 'b1_Grier_beta_mm', 'b1_Grier_beta_ll', 'b2_z_Hit', 'b2_z_FA', 'b2_z_Hit_mm', 'b2_z_FA_mm', 'b2_z_Hit_ll', 'b2_z_FA_ll', 'b2_d_prime_mm',  'b2_d_prime_ll', 'b2_A_prime_mm', 'b2_A_prime_ll', 'b2_c_mm', 'b2_c_ll', 'b2_Grier_beta_mm', 'b2_Grier_beta_ll', 'b3_z_Hit', 'b3_z_FA', 'b3_z_Hit_mm', 'b3_z_FA_mm', 'b3_z_Hit_ll', 'b3_z_FA_ll', 'b3_d_prime_mm',  'b3_d_prime_ll', 'b3_A_prime_mm', 'b3_A_prime_ll', 'b3_c_mm', 'b3_c_ll', 'b3_Grier_beta_mm', 'b3_Grier_beta_ll', 'b4_z_Hit', 'b4_z_FA', 'b4_z_Hit_mm', 'b4_z_FA_mm', 'b4_z_Hit_ll', 'b4_z_FA_ll', 'b4_d_prime_mm',  'b4_d_prime_ll', 'b4_A_prime_mm', 'b4_A_prime_ll', 'b4_c_mm', 'b4_c_ll', 'b4_Grier_beta_mm', 'b4_Grier_beta_ll', 'b5_z_Hit', 'b5_z_FA', 'b5_z_Hit_mm', 'b5_z_FA_mm', 'b5_z_Hit_ll', 'b5_z_FA_ll', 'b5_d_prime_mm',  'b5_d_prime_ll', 'b5_A_prime_mm', 'b5_A_prime_ll', 'b5_c_mm', 'b5_c_ll', 'b5_Grier_beta_mm', 'b5_Grier_beta_ll']\n\n            GNG_summary_wide = GNG_summary_wide.drop(columns=block_sdt_vars)\n\n            #make the sub index into a dataset column\n            GNG_summary_wide = GNG_summary_wide.reset_index(level = 0)\n\n            #re-order columns\n            columnnames_reorder = ['sub', 'all_nGo', 'all_nNoGo', 'all_nAcc', 'all_pAcc', 'all_nGo_Hit', 'all_nGo_Miss', 'all_nNoGo_Corr',  'all_nNoGo_FA', 'all_pGo_Hit', 'all_pGo_Miss', 'all_pNoGo_Corr', 'all_pNoGo_FA', 'all_RTmeanGo_Hit',  'all_RTmeanNoGo_FA', 'all_RTmedGo_Hit', 'all_RTmedNoGo_FA', 'all_z_Hit', 'all_z_FA', 'all_z_Hit_mm', 'all_z_FA_mm', 'all_z_Hit_ll', 'all_z_FA_ll', 'all_d_prime_mm',  'all_d_prime_ll', 'all_A_prime_mm', 'all_A_prime_ll', 'all_c_mm', 'all_c_ll', 'all_Grier_beta_mm', 'all_Grier_beta_ll', 'b1_nGo', 'b1_nNoGo', 'b1_nAcc', 'b1_pAcc', 'b1_nGo_Hit', 'b1_nGo_Miss', 'b1_nNoGo_Corr',  'b1_nNoGo_FA', 'b1_pGo_Hit', 'b1_pGo_Miss', 'b1_pNoGo_Corr', 'b1_pNoGo_FA', 'b1_RTmeanGo_Hit',  'b1_RTmeanNoGo_FA', 'b1_RTmedGo_Hit', 'b1_RTmedNoGo_FA', 'b2_nGo', 'b2_nNoGo', 'b2_nAcc', 'b2_pAcc', 'b2_nGo_Hit', 'b2_nGo_Miss', 'b2_nNoGo_Corr',  'b2_nNoGo_FA', 'b2_pGo_Hit', 'b2_pGo_Miss', 'b2_pNoGo_Corr', 'b2_pNoGo_FA', 'b2_RTmeanGo_Hit',  'b2_RTmeanNoGo_FA', 'b2_RTmedGo_Hit', 'b2_RTmedNoGo_FA', 'b3_nGo', 'b3_nNoGo', 'b3_nAcc', 'b3_pAcc', 'b3_nGo_Hit', 'b3_nGo_Miss', 'b3_nNoGo_Corr',  'b3_nNoGo_FA', 'b3_pGo_Hit', 'b3_pGo_Miss', 'b3_pNoGo_Corr', 'b3_pNoGo_FA', 'b3_RTmeanGo_Hit',  'b3_RTmeanNoGo_FA', 'b3_RTmedGo_Hit', 'b3_RTmedNoGo_FA', 'b4_nGo', 'b4_nNoGo', 'b4_nAcc', 'b4_pAcc', 'b4_nGo_Hit', 'b4_nGo_Miss', 'b4_nNoGo_Corr',  'b4_nNoGo_FA', 'b4_pGo_Hit', 'b4_pGo_Miss', 'b4_pNoGo_Corr', 'b4_pNoGo_FA', 'b4_RTmeanGo_Hit',  'b4_RTmeanNoGo_FA', 'b4_RTmedGo_Hit', 'b4_RTmedNoGo_FA', 'b5_nGo', 'b5_nNoGo', 'b5_nAcc', 'b5_pAcc', 'b5_nGo_Hit', 'b5_nGo_Miss', 'b5_nNoGo_Corr',  'b5_nNoGo_FA', 'b5_pGo_Hit', 'b5_pGo_Miss', 'b5_pNoGo_Corr', 'b5_pNoGo_FA', 'b5_RTmeanGo_Hit',  'b5_RTmeanNoGo_FA', 'b5_RTmedGo_Hit', 'b5_RTmedNoGo_FA']\n\n            GNG_summary_wide = GNG_summary_wide.reindex(columns=columnnames_reorder)\n\n            #get indiviudal blocks subset\n            GNG_summary_blocks = GNG_summary_dat[GNG_summary_dat.block.isin(['b1', 'b2', 'b3', 'b4', 'b5'])]\n\n            ## load databases\n            #derivative data path\n            derivative_data_path = Path(bids_dir).joinpath('derivatives/preprocessed/beh')\n\n            #load databases\n            GNG_database = pd.read_csv(str(Path(derivative_data_path).joinpath('task-gng_summary.tsv')), sep = '\\t')\n            GNG_database_long = pd.read_csv(str(Path(derivative_data_path).joinpath('task-gng_summary_long.tsv')), sep = '\\t')\n\n            #if overwriting participants\n            if overwrite_flag == True:\n                #function to drop rows based on values\n                def filter_rows_by_values(df, col, values):\n                    return df[df[col].isin(values) == False]\n\n                #get list of subs to filter in wide and long data\n                wide_sub_list = list(GNG_summary_wide['sub'].unique())\n                long_sub_list = list(GNG_summary_blocks['sub'].unique())\n\n                #filter out/remove exisiting subs to overwrite\n                GNG_database = filter_rows_by_values(GNG_database, 'sub', wide_sub_list)\n                GNG_database_long = filter_rows_by_values(GNG_database_long, 'sub', long_sub_list)\n\n            #add newly processed data\n            GNG_database = GNG_database.append(GNG_summary_wide)\n            GNG_database_long = GNG_database_long.append(GNG_summary_blocks)\n\n            #round to 3 decimal points\n            GNG_database = GNG_database.applymap(lambda x: round(x, 3) if isinstance(x, (int, float)) else x)\n            GNG_database_long = GNG_database_long.applymap(lambda x: round(x, 3) if isinstance(x, (int, float)) else x)\n\n            #write databases\n            GNG_database.to_csv(str(Path(derivative_data_path).joinpath('task-gng_summary.tsv')), sep = '\\t', encoding='utf-8-sig', index = False)\n            GNG_database_long.to_csv(str(Path(derivative_data_path).joinpath('task-gng_summary_long.tsv')), sep = '\\t', encoding='utf-8-sig', index = False)\n\n        else:\n            print('******** No new data to be processed ********')\n            GNG_database = 'no new data files'\n            GNG_database_long = 'no new data files'\n\n    return GNG_database, GNG_database_long\n"), ('overwrite_flag', False)]